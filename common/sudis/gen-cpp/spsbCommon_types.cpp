/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "spsbCommon_types.h"

#include <algorithm>

namespace spsb {

int _kTSpSbAttributeTypeValues[] = {
  TSpSbAttributeType::BOOLEAN,
  TSpSbAttributeType::INT,
  TSpSbAttributeType::DATE_TIME_ISO_8601,
  TSpSbAttributeType::TEXT,
  TSpSbAttributeType::DOUBLE,
  TSpSbAttributeType::BYTES,
  TSpSbAttributeType::LONG
};
const char* _kTSpSbAttributeTypeNames[] = {
  "BOOLEAN",
  "INT",
  "DATE_TIME_ISO_8601",
  "TEXT",
  "DOUBLE",
  "BYTES",
  "LONG"
};
const std::map<int, const char*> _TSpSbAttributeType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kTSpSbAttributeTypeValues, _kTSpSbAttributeTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* TSpsbEventAttribute::ascii_fingerprint = "09A4D2F732F4A181FD44C543B235CF07";
const uint8_t TSpsbEventAttribute::binary_fingerprint[16] = {0x09,0xA4,0xD2,0xF7,0x32,0xF4,0xA1,0x81,0xFD,0x44,0xC5,0x43,0xB2,0x35,0xCF,0x07};

uint32_t TSpsbEventAttribute::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type = (TSpSbAttributeType::type)ecast0;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TSpsbEventAttribute::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TSpsbEventAttribute");

  if (this->__isset.code) {
    xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->code);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.description) {
    xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 20);
    xfer += oprot->writeString(this->description);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 30);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TSpsbEventAttribute &a, TSpsbEventAttribute &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.description, b.description);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

const char* TSpsbEventAttributeValue::ascii_fingerprint = "09A4D2F732F4A181FD44C543B235CF07";
const uint8_t TSpsbEventAttributeValue::binary_fingerprint[16] = {0x09,0xA4,0xD2,0xF7,0x32,0xF4,0xA1,0x81,0xFD,0x44,0xC5,0x43,0xB2,0x35,0xCF,0x07};

uint32_t TSpsbEventAttributeValue::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->type = (TSpSbAttributeType::type)ecast1;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TSpsbEventAttributeValue::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TSpsbEventAttributeValue");

  if (this->__isset.code) {
    xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->code);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 20);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 30);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TSpsbEventAttributeValue &a, TSpsbEventAttributeValue &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.value, b.value);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

} // namespace
