/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef cciCommonV1_TYPES_H
#define cciCommonV1_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace sudis {

typedef struct _TCciUserAttributeV1__isset {
  _TCciUserAttributeV1__isset() : values(false) {}
  bool values;
} _TCciUserAttributeV1__isset;

class TCciUserAttributeV1 {
 public:

  static const char* ascii_fingerprint; // = "09A67A266242E872217E8BB1F6E483B3";
  static const uint8_t binary_fingerprint[16]; // = {0x09,0xA6,0x7A,0x26,0x62,0x42,0xE8,0x72,0x21,0x7E,0x8B,0xB1,0xF6,0xE4,0x83,0xB3};

  TCciUserAttributeV1() : name() {
  }

  virtual ~TCciUserAttributeV1() throw() {}

  std::string name;
  std::vector<std::string>  values;

  _TCciUserAttributeV1__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_values(const std::vector<std::string> & val) {
    values = val;
    __isset.values = true;
  }

  bool operator == (const TCciUserAttributeV1 & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (__isset.values != rhs.__isset.values)
      return false;
    else if (__isset.values && !(values == rhs.values))
      return false;
    return true;
  }
  bool operator != (const TCciUserAttributeV1 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCciUserAttributeV1 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TCciUserAttributeV1 &a, TCciUserAttributeV1 &b);

typedef struct _TCciUserAttributeSetV1__isset {
  _TCciUserAttributeSetV1__isset() : attributes(false) {}
  bool attributes;
} _TCciUserAttributeSetV1__isset;

class TCciUserAttributeSetV1 {
 public:

  static const char* ascii_fingerprint; // = "D8F20F88DED3BA6DA9AC26A55C996E5B";
  static const uint8_t binary_fingerprint[16]; // = {0xD8,0xF2,0x0F,0x88,0xDE,0xD3,0xBA,0x6D,0xA9,0xAC,0x26,0xA5,0x5C,0x99,0x6E,0x5B};

  TCciUserAttributeSetV1() {
  }

  virtual ~TCciUserAttributeSetV1() throw() {}

  std::vector<TCciUserAttributeV1>  attributes;

  _TCciUserAttributeSetV1__isset __isset;

  void __set_attributes(const std::vector<TCciUserAttributeV1> & val) {
    attributes = val;
    __isset.attributes = true;
  }

  bool operator == (const TCciUserAttributeSetV1 & rhs) const
  {
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    return true;
  }
  bool operator != (const TCciUserAttributeSetV1 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCciUserAttributeSetV1 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TCciUserAttributeSetV1 &a, TCciUserAttributeSetV1 &b);

typedef struct _TCciResultMessage__isset {
  _TCciResultMessage__isset() : code(false), message(false) {}
  bool code;
  bool message;
} _TCciResultMessage__isset;

class TCciResultMessage {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  TCciResultMessage() : code(), message() {
  }

  virtual ~TCciResultMessage() throw() {}

  std::string code;
  std::string message;

  _TCciResultMessage__isset __isset;

  void __set_code(const std::string& val) {
    code = val;
  }

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const TCciResultMessage & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const TCciResultMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCciResultMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TCciResultMessage &a, TCciResultMessage &b);

typedef struct _TCciFieldValidateMessage__isset {
  _TCciFieldValidateMessage__isset() : field(false), code(false), message(false) {}
  bool field;
  bool code;
  bool message;
} _TCciFieldValidateMessage__isset;

class TCciFieldValidateMessage {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  TCciFieldValidateMessage() : field(), code(), message() {
  }

  virtual ~TCciFieldValidateMessage() throw() {}

  std::string field;
  std::string code;
  std::string message;

  _TCciFieldValidateMessage__isset __isset;

  void __set_field(const std::string& val) {
    field = val;
  }

  void __set_code(const std::string& val) {
    code = val;
  }

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const TCciFieldValidateMessage & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(code == rhs.code))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const TCciFieldValidateMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCciFieldValidateMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TCciFieldValidateMessage &a, TCciFieldValidateMessage &b);

} // namespace

#endif
