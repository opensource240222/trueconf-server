/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef cciRoleCommonV1_TYPES_H
#define cciRoleCommonV1_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace sudis {

struct TCciRoleSubject {
  enum type {
    USER = 1,
    SP = 2
  };
};

extern const std::map<int, const char*> _TCciRoleSubject_VALUES_TO_NAMES;

typedef struct _TCciRoleV1__isset {
  _TCciRoleV1__isset() : name(false), enabled(false), roleSubject(false) {}
  bool name;
  bool enabled;
  bool roleSubject;
} _TCciRoleV1__isset;

class TCciRoleV1 {
 public:

  static const char* ascii_fingerprint; // = "3CA32BDB4DB983237A10878C2E9963C6";
  static const uint8_t binary_fingerprint[16]; // = {0x3C,0xA3,0x2B,0xDB,0x4D,0xB9,0x83,0x23,0x7A,0x10,0x87,0x8C,0x2E,0x99,0x63,0xC6};

  TCciRoleV1() : spCode(), mnemonic(), name(), enabled(0), roleSubject((TCciRoleSubject::type)0) {
  }

  virtual ~TCciRoleV1() throw() {}

  std::string spCode;
  std::string mnemonic;
  std::string name;
  bool enabled;
  TCciRoleSubject::type roleSubject;

  _TCciRoleV1__isset __isset;

  void __set_spCode(const std::string& val) {
    spCode = val;
  }

  void __set_mnemonic(const std::string& val) {
    mnemonic = val;
  }

  void __set_name(const std::string& val) {
    name = val;
    __isset.name = true;
  }

  void __set_enabled(const bool val) {
    enabled = val;
    __isset.enabled = true;
  }

  void __set_roleSubject(const TCciRoleSubject::type val) {
    roleSubject = val;
    __isset.roleSubject = true;
  }

  bool operator == (const TCciRoleV1 & rhs) const
  {
    if (!(spCode == rhs.spCode))
      return false;
    if (!(mnemonic == rhs.mnemonic))
      return false;
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.enabled != rhs.__isset.enabled)
      return false;
    else if (__isset.enabled && !(enabled == rhs.enabled))
      return false;
    if (__isset.roleSubject != rhs.__isset.roleSubject)
      return false;
    else if (__isset.roleSubject && !(roleSubject == rhs.roleSubject))
      return false;
    return true;
  }
  bool operator != (const TCciRoleV1 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCciRoleV1 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TCciRoleV1 &a, TCciRoleV1 &b);

} // namespace

#endif
