/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TServiceExtSpsb_H
#define TServiceExtSpsb_H

#include <thrift/TDispatchProcessor.h>
#include "spsbExt_types.h"

namespace spsb {

class TServiceExtSpsbIf {
 public:
  virtual ~TServiceExtSpsbIf() {}
  virtual void ping(TSpsbPingResult& _return, const TSpsbPingArgs& arguments) = 0;
  virtual void logEvent(TSpsbLogEventResult& _return, const TSpsbLogEventArgs& arguments) = 0;
  virtual void listEvents(TSpsbListEventsResult& _return, const TSpsbListEventsArgs& arguments) = 0;
};

class TServiceExtSpsbIfFactory {
 public:
  typedef TServiceExtSpsbIf Handler;

  virtual ~TServiceExtSpsbIfFactory() {}

  virtual TServiceExtSpsbIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TServiceExtSpsbIf* /* handler */) = 0;
};

class TServiceExtSpsbIfSingletonFactory : virtual public TServiceExtSpsbIfFactory {
 public:
  TServiceExtSpsbIfSingletonFactory(const boost::shared_ptr<TServiceExtSpsbIf>& iface) : iface_(iface) {}
  virtual ~TServiceExtSpsbIfSingletonFactory() {}

  virtual TServiceExtSpsbIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TServiceExtSpsbIf* /* handler */) {}

 protected:
  boost::shared_ptr<TServiceExtSpsbIf> iface_;
};

class TServiceExtSpsbNull : virtual public TServiceExtSpsbIf {
 public:
  virtual ~TServiceExtSpsbNull() {}
  void ping(TSpsbPingResult& /* _return */, const TSpsbPingArgs& /* arguments */) {
    return;
  }
  void logEvent(TSpsbLogEventResult& /* _return */, const TSpsbLogEventArgs& /* arguments */) {
    return;
  }
  void listEvents(TSpsbListEventsResult& /* _return */, const TSpsbListEventsArgs& /* arguments */) {
    return;
  }
};

typedef struct _TServiceExtSpsb_ping_args__isset {
  _TServiceExtSpsb_ping_args__isset() : arguments(false) {}
  bool arguments;
} _TServiceExtSpsb_ping_args__isset;

class TServiceExtSpsb_ping_args {
 public:

  TServiceExtSpsb_ping_args() {
  }

  virtual ~TServiceExtSpsb_ping_args() throw() {}

  TSpsbPingArgs arguments;

  _TServiceExtSpsb_ping_args__isset __isset;

  void __set_arguments(const TSpsbPingArgs& val) {
    arguments = val;
  }

  bool operator == (const TServiceExtSpsb_ping_args & rhs) const
  {
    if (!(arguments == rhs.arguments))
      return false;
    return true;
  }
  bool operator != (const TServiceExtSpsb_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TServiceExtSpsb_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TServiceExtSpsb_ping_pargs {
 public:


  virtual ~TServiceExtSpsb_ping_pargs() throw() {}

  const TSpsbPingArgs* arguments;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TServiceExtSpsb_ping_result__isset {
  _TServiceExtSpsb_ping_result__isset() : success(false) {}
  bool success;
} _TServiceExtSpsb_ping_result__isset;

class TServiceExtSpsb_ping_result {
 public:

  TServiceExtSpsb_ping_result() {
  }

  virtual ~TServiceExtSpsb_ping_result() throw() {}

  TSpsbPingResult success;

  _TServiceExtSpsb_ping_result__isset __isset;

  void __set_success(const TSpsbPingResult& val) {
    success = val;
  }

  bool operator == (const TServiceExtSpsb_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TServiceExtSpsb_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TServiceExtSpsb_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TServiceExtSpsb_ping_presult__isset {
  _TServiceExtSpsb_ping_presult__isset() : success(false) {}
  bool success;
} _TServiceExtSpsb_ping_presult__isset;

class TServiceExtSpsb_ping_presult {
 public:


  virtual ~TServiceExtSpsb_ping_presult() throw() {}

  TSpsbPingResult* success;

  _TServiceExtSpsb_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TServiceExtSpsb_logEvent_args__isset {
  _TServiceExtSpsb_logEvent_args__isset() : arguments(false) {}
  bool arguments;
} _TServiceExtSpsb_logEvent_args__isset;

class TServiceExtSpsb_logEvent_args {
 public:

  TServiceExtSpsb_logEvent_args() {
  }

  virtual ~TServiceExtSpsb_logEvent_args() throw() {}

  TSpsbLogEventArgs arguments;

  _TServiceExtSpsb_logEvent_args__isset __isset;

  void __set_arguments(const TSpsbLogEventArgs& val) {
    arguments = val;
  }

  bool operator == (const TServiceExtSpsb_logEvent_args & rhs) const
  {
    if (!(arguments == rhs.arguments))
      return false;
    return true;
  }
  bool operator != (const TServiceExtSpsb_logEvent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TServiceExtSpsb_logEvent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TServiceExtSpsb_logEvent_pargs {
 public:


  virtual ~TServiceExtSpsb_logEvent_pargs() throw() {}

  const TSpsbLogEventArgs* arguments;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TServiceExtSpsb_logEvent_result__isset {
  _TServiceExtSpsb_logEvent_result__isset() : success(false) {}
  bool success;
} _TServiceExtSpsb_logEvent_result__isset;

class TServiceExtSpsb_logEvent_result {
 public:

  TServiceExtSpsb_logEvent_result() {
  }

  virtual ~TServiceExtSpsb_logEvent_result() throw() {}

  TSpsbLogEventResult success;

  _TServiceExtSpsb_logEvent_result__isset __isset;

  void __set_success(const TSpsbLogEventResult& val) {
    success = val;
  }

  bool operator == (const TServiceExtSpsb_logEvent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TServiceExtSpsb_logEvent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TServiceExtSpsb_logEvent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TServiceExtSpsb_logEvent_presult__isset {
  _TServiceExtSpsb_logEvent_presult__isset() : success(false) {}
  bool success;
} _TServiceExtSpsb_logEvent_presult__isset;

class TServiceExtSpsb_logEvent_presult {
 public:


  virtual ~TServiceExtSpsb_logEvent_presult() throw() {}

  TSpsbLogEventResult* success;

  _TServiceExtSpsb_logEvent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TServiceExtSpsb_listEvents_args__isset {
  _TServiceExtSpsb_listEvents_args__isset() : arguments(false) {}
  bool arguments;
} _TServiceExtSpsb_listEvents_args__isset;

class TServiceExtSpsb_listEvents_args {
 public:

  TServiceExtSpsb_listEvents_args() {
  }

  virtual ~TServiceExtSpsb_listEvents_args() throw() {}

  TSpsbListEventsArgs arguments;

  _TServiceExtSpsb_listEvents_args__isset __isset;

  void __set_arguments(const TSpsbListEventsArgs& val) {
    arguments = val;
  }

  bool operator == (const TServiceExtSpsb_listEvents_args & rhs) const
  {
    if (!(arguments == rhs.arguments))
      return false;
    return true;
  }
  bool operator != (const TServiceExtSpsb_listEvents_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TServiceExtSpsb_listEvents_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TServiceExtSpsb_listEvents_pargs {
 public:


  virtual ~TServiceExtSpsb_listEvents_pargs() throw() {}

  const TSpsbListEventsArgs* arguments;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TServiceExtSpsb_listEvents_result__isset {
  _TServiceExtSpsb_listEvents_result__isset() : success(false) {}
  bool success;
} _TServiceExtSpsb_listEvents_result__isset;

class TServiceExtSpsb_listEvents_result {
 public:

  TServiceExtSpsb_listEvents_result() {
  }

  virtual ~TServiceExtSpsb_listEvents_result() throw() {}

  TSpsbListEventsResult success;

  _TServiceExtSpsb_listEvents_result__isset __isset;

  void __set_success(const TSpsbListEventsResult& val) {
    success = val;
  }

  bool operator == (const TServiceExtSpsb_listEvents_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TServiceExtSpsb_listEvents_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TServiceExtSpsb_listEvents_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TServiceExtSpsb_listEvents_presult__isset {
  _TServiceExtSpsb_listEvents_presult__isset() : success(false) {}
  bool success;
} _TServiceExtSpsb_listEvents_presult__isset;

class TServiceExtSpsb_listEvents_presult {
 public:


  virtual ~TServiceExtSpsb_listEvents_presult() throw() {}

  TSpsbListEventsResult* success;

  _TServiceExtSpsb_listEvents_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TServiceExtSpsbClient : virtual public TServiceExtSpsbIf {
 public:
  TServiceExtSpsbClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TServiceExtSpsbClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(TSpsbPingResult& _return, const TSpsbPingArgs& arguments);
  void send_ping(const TSpsbPingArgs& arguments);
  void recv_ping(TSpsbPingResult& _return);
  void logEvent(TSpsbLogEventResult& _return, const TSpsbLogEventArgs& arguments);
  void send_logEvent(const TSpsbLogEventArgs& arguments);
  void recv_logEvent(TSpsbLogEventResult& _return);
  void listEvents(TSpsbListEventsResult& _return, const TSpsbListEventsArgs& arguments);
  void send_listEvents(const TSpsbListEventsArgs& arguments);
  void recv_listEvents(TSpsbListEventsResult& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TServiceExtSpsbProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TServiceExtSpsbIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TServiceExtSpsbProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_logEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listEvents(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TServiceExtSpsbProcessor(boost::shared_ptr<TServiceExtSpsbIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &TServiceExtSpsbProcessor::process_ping;
    processMap_["logEvent"] = &TServiceExtSpsbProcessor::process_logEvent;
    processMap_["listEvents"] = &TServiceExtSpsbProcessor::process_listEvents;
  }

  virtual ~TServiceExtSpsbProcessor() {}
};

class TServiceExtSpsbProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TServiceExtSpsbProcessorFactory(const ::boost::shared_ptr< TServiceExtSpsbIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TServiceExtSpsbIfFactory > handlerFactory_;
};

class TServiceExtSpsbMultiface : virtual public TServiceExtSpsbIf {
 public:
  TServiceExtSpsbMultiface(std::vector<boost::shared_ptr<TServiceExtSpsbIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TServiceExtSpsbMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TServiceExtSpsbIf> > ifaces_;
  TServiceExtSpsbMultiface() {}
  void add(boost::shared_ptr<TServiceExtSpsbIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping(TSpsbPingResult& _return, const TSpsbPingArgs& arguments) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(_return, arguments);
    }
    ifaces_[i]->ping(_return, arguments);
    return;
  }

  void logEvent(TSpsbLogEventResult& _return, const TSpsbLogEventArgs& arguments) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->logEvent(_return, arguments);
    }
    ifaces_[i]->logEvent(_return, arguments);
    return;
  }

  void listEvents(TSpsbListEventsResult& _return, const TSpsbListEventsArgs& arguments) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listEvents(_return, arguments);
    }
    ifaces_[i]->listEvents(_return, arguments);
    return;
  }

};

} // namespace

#endif
