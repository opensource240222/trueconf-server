/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "spsbExt_types.h"

#include <algorithm>

namespace spsb {

int _kTSpsbAttributeModifierValues[] = {
  TSpsbAttributeModifier::ANY,
  TSpsbAttributeModifier::SOME,
  TSpsbAttributeModifier::ALL
};
const char* _kTSpsbAttributeModifierNames[] = {
  "ANY",
  "SOME",
  "ALL"
};
const std::map<int, const char*> _TSpsbAttributeModifier_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTSpsbAttributeModifierValues, _kTSpsbAttributeModifierNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTSpSbExtOperationResultValues[] = {
  TSpSbExtOperationResult::SUCCESS,
  TSpSbExtOperationResult::ERROR_INTERNAL,
  TSpSbExtOperationResult::REQUEST_REPLAY_RESTRICTED,
  TSpSbExtOperationResult::REQUEST_EXPIRED,
  TSpSbExtOperationResult::REQUEST_NONCE_NOT_VALID,
  TSpSbExtOperationResult::SP_PERMISSION_DENIED,
  TSpSbExtOperationResult::SP_ACCOUNT_BLOCKED,
  TSpSbExtOperationResult::SP_NOT_AUTHENTICATED
};
const char* _kTSpSbExtOperationResultNames[] = {
  "SUCCESS",
  "ERROR_INTERNAL",
  "REQUEST_REPLAY_RESTRICTED",
  "REQUEST_EXPIRED",
  "REQUEST_NONCE_NOT_VALID",
  "SP_PERMISSION_DENIED",
  "SP_ACCOUNT_BLOCKED",
  "SP_NOT_AUTHENTICATED"
};
const std::map<int, const char*> _TSpSbExtOperationResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kTSpSbExtOperationResultValues, _kTSpSbExtOperationResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTSpsbPingVersionValues[] = {
  TSpsbPingVersion::V1
};
const char* _kTSpsbPingVersionNames[] = {
  "V1"
};
const std::map<int, const char*> _TSpsbPingVersion_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kTSpsbPingVersionValues, _kTSpsbPingVersionNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTSpsbLogEventVersionValues[] = {
  TSpsbLogEventVersion::V1
};
const char* _kTSpsbLogEventVersionNames[] = {
  "V1"
};
const std::map<int, const char*> _TSpsbLogEventVersion_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kTSpsbLogEventVersionValues, _kTSpsbLogEventVersionNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTSpsbListEventsVersionValues[] = {
  TSpsbListEventsVersion::V1
};
const char* _kTSpsbListEventsVersionNames[] = {
  "V1"
};
const std::map<int, const char*> _TSpsbListEventsVersion_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kTSpsbListEventsVersionValues, _kTSpsbListEventsVersionNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* TSpsbEvent::ascii_fingerprint = "290F5B989B6BDB4F7C95A2A70E09300C";
const uint8_t TSpsbEvent::binary_fingerprint[16] = {0x29,0x0F,0x5B,0x98,0x9B,0x6B,0xDB,0x4F,0x7C,0x95,0xA2,0xA7,0x0E,0x09,0x30,0x0C};

uint32_t TSpsbEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eventMillis);
          this->__isset.eventMillis = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->spCode);
          this->__isset.spCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userLogin);
          this->__isset.userLogin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->typeCode);
          this->__isset.typeCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resultCode);
          this->__isset.resultCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->attributesValues.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->attributesValues.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->attributesValues[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.attributesValues = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 70:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ipAddress);
          this->__isset.ipAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TSpsbEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TSpsbEvent");

  if (this->__isset.eventMillis) {
    xfer += oprot->writeFieldBegin("eventMillis", ::apache::thrift::protocol::T_I64, 10);
    xfer += oprot->writeI64(this->eventMillis);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.spCode) {
    xfer += oprot->writeFieldBegin("spCode", ::apache::thrift::protocol::T_STRING, 20);
    xfer += oprot->writeString(this->spCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.userLogin) {
    xfer += oprot->writeFieldBegin("userLogin", ::apache::thrift::protocol::T_STRING, 30);
    xfer += oprot->writeString(this->userLogin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.typeCode) {
    xfer += oprot->writeFieldBegin("typeCode", ::apache::thrift::protocol::T_STRING, 40);
    xfer += oprot->writeString(this->typeCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.resultCode) {
    xfer += oprot->writeFieldBegin("resultCode", ::apache::thrift::protocol::T_STRING, 50);
    xfer += oprot->writeString(this->resultCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attributesValues) {
    xfer += oprot->writeFieldBegin("attributesValues", ::apache::thrift::protocol::T_LIST, 60);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->attributesValues.size()));
      std::vector< ::spsb::TSpsbEventAttributeValue> ::const_iterator _iter5;
      for (_iter5 = this->attributesValues.begin(); _iter5 != this->attributesValues.end(); ++_iter5)
      {
        xfer += (*_iter5).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ipAddress) {
    xfer += oprot->writeFieldBegin("ipAddress", ::apache::thrift::protocol::T_STRING, 70);
    xfer += oprot->writeString(this->ipAddress);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TSpsbEvent &a, TSpsbEvent &b) {
  using ::std::swap;
  swap(a.eventMillis, b.eventMillis);
  swap(a.spCode, b.spCode);
  swap(a.userLogin, b.userLogin);
  swap(a.typeCode, b.typeCode);
  swap(a.resultCode, b.resultCode);
  swap(a.attributesValues, b.attributesValues);
  swap(a.ipAddress, b.ipAddress);
  swap(a.__isset, b.__isset);
}

const char* TSpsbPingArgs::ascii_fingerprint = "8C4277FAB59ADB4EC070272B884CCE20";
const uint8_t TSpsbPingArgs::binary_fingerprint[16] = {0x8C,0x42,0x77,0xFA,0xB5,0x9A,0xDB,0x4E,0xC0,0x70,0x27,0x2B,0x88,0x4C,0xCE,0x20};

uint32_t TSpsbPingArgs::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast6;
          xfer += iprot->readI32(ecast6);
          this->version = (TSpsbPingVersion::type)ecast6;
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->requestMillis);
          this->__isset.requestMillis = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->requestNonce);
          this->__isset.requestNonce = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TSpsbPingArgs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TSpsbPingArgs");

  if (this->__isset.version) {
    xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32((int32_t)this->version);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.requestMillis) {
    xfer += oprot->writeFieldBegin("requestMillis", ::apache::thrift::protocol::T_I64, 20);
    xfer += oprot->writeI64(this->requestMillis);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.requestNonce) {
    xfer += oprot->writeFieldBegin("requestNonce", ::apache::thrift::protocol::T_STRING, 30);
    xfer += oprot->writeBinary(this->requestNonce);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TSpsbPingArgs &a, TSpsbPingArgs &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.requestMillis, b.requestMillis);
  swap(a.requestNonce, b.requestNonce);
  swap(a.__isset, b.__isset);
}

const char* TSpsbPingResult::ascii_fingerprint = "A2E25E9E1B6658C5FA455CC4695B2DE0";
const uint8_t TSpsbPingResult::binary_fingerprint[16] = {0xA2,0xE2,0x5E,0x9E,0x1B,0x66,0x58,0xC5,0xFA,0x45,0x5C,0xC4,0x69,0x5B,0x2D,0xE0};

uint32_t TSpsbPingResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->responseMillis);
          this->__isset.responseMillis = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->responseNonce);
          this->__isset.responseNonce = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast7;
          xfer += iprot->readI32(ecast7);
          this->result = (TSpSbExtOperationResult::type)ecast7;
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resultMessage);
          this->__isset.resultMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TSpsbPingResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TSpsbPingResult");

  if (this->__isset.responseMillis) {
    xfer += oprot->writeFieldBegin("responseMillis", ::apache::thrift::protocol::T_I64, 10);
    xfer += oprot->writeI64(this->responseMillis);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.responseNonce) {
    xfer += oprot->writeFieldBegin("responseNonce", ::apache::thrift::protocol::T_STRING, 20);
    xfer += oprot->writeBinary(this->responseNonce);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.result) {
    xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_I32, 30);
    xfer += oprot->writeI32((int32_t)this->result);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.resultMessage) {
    xfer += oprot->writeFieldBegin("resultMessage", ::apache::thrift::protocol::T_STRING, 40);
    xfer += oprot->writeString(this->resultMessage);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TSpsbPingResult &a, TSpsbPingResult &b) {
  using ::std::swap;
  swap(a.responseMillis, b.responseMillis);
  swap(a.responseNonce, b.responseNonce);
  swap(a.result, b.result);
  swap(a.resultMessage, b.resultMessage);
  swap(a.__isset, b.__isset);
}

const char* TSpsbLogEventArgs::ascii_fingerprint = "089F8E189F45E343D9AEE99CA772C18C";
const uint8_t TSpsbLogEventArgs::binary_fingerprint[16] = {0x08,0x9F,0x8E,0x18,0x9F,0x45,0xE3,0x43,0xD9,0xAE,0xE9,0x9C,0xA7,0x72,0xC1,0x8C};

uint32_t TSpsbLogEventArgs::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast8;
          xfer += iprot->readI32(ecast8);
          this->version = (TSpsbLogEventVersion::type)ecast8;
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->requestMillis);
          this->__isset.requestMillis = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->requestNonce);
          this->__isset.requestNonce = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->events.clear();
            uint32_t _size9;
            ::apache::thrift::protocol::TType _etype12;
            xfer += iprot->readListBegin(_etype12, _size9);
            this->events.resize(_size9);
            uint32_t _i13;
            for (_i13 = 0; _i13 < _size9; ++_i13)
            {
              xfer += this->events[_i13].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.events = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TSpsbLogEventArgs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TSpsbLogEventArgs");

  if (this->__isset.version) {
    xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32((int32_t)this->version);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.requestMillis) {
    xfer += oprot->writeFieldBegin("requestMillis", ::apache::thrift::protocol::T_I64, 20);
    xfer += oprot->writeI64(this->requestMillis);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.requestNonce) {
    xfer += oprot->writeFieldBegin("requestNonce", ::apache::thrift::protocol::T_STRING, 30);
    xfer += oprot->writeBinary(this->requestNonce);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.events) {
    xfer += oprot->writeFieldBegin("events", ::apache::thrift::protocol::T_LIST, 40);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->events.size()));
      std::vector<TSpsbEvent> ::const_iterator _iter14;
      for (_iter14 = this->events.begin(); _iter14 != this->events.end(); ++_iter14)
      {
        xfer += (*_iter14).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TSpsbLogEventArgs &a, TSpsbLogEventArgs &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.requestMillis, b.requestMillis);
  swap(a.requestNonce, b.requestNonce);
  swap(a.events, b.events);
  swap(a.__isset, b.__isset);
}

const char* TSpsbLogEventResult::ascii_fingerprint = "A2E25E9E1B6658C5FA455CC4695B2DE0";
const uint8_t TSpsbLogEventResult::binary_fingerprint[16] = {0xA2,0xE2,0x5E,0x9E,0x1B,0x66,0x58,0xC5,0xFA,0x45,0x5C,0xC4,0x69,0x5B,0x2D,0xE0};

uint32_t TSpsbLogEventResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->responseMillis);
          this->__isset.responseMillis = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->responseNonce);
          this->__isset.responseNonce = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast15;
          xfer += iprot->readI32(ecast15);
          this->result = (TSpSbExtOperationResult::type)ecast15;
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resultMessage);
          this->__isset.resultMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TSpsbLogEventResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TSpsbLogEventResult");

  if (this->__isset.responseMillis) {
    xfer += oprot->writeFieldBegin("responseMillis", ::apache::thrift::protocol::T_I64, 10);
    xfer += oprot->writeI64(this->responseMillis);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.responseNonce) {
    xfer += oprot->writeFieldBegin("responseNonce", ::apache::thrift::protocol::T_STRING, 20);
    xfer += oprot->writeBinary(this->responseNonce);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.result) {
    xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_I32, 30);
    xfer += oprot->writeI32((int32_t)this->result);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.resultMessage) {
    xfer += oprot->writeFieldBegin("resultMessage", ::apache::thrift::protocol::T_STRING, 40);
    xfer += oprot->writeString(this->resultMessage);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TSpsbLogEventResult &a, TSpsbLogEventResult &b) {
  using ::std::swap;
  swap(a.responseMillis, b.responseMillis);
  swap(a.responseNonce, b.responseNonce);
  swap(a.result, b.result);
  swap(a.resultMessage, b.resultMessage);
  swap(a.__isset, b.__isset);
}

const char* TSpsbListEventsArgs::ascii_fingerprint = "3BB6E4A407C9EF47C079EB4F1F66AC10";
const uint8_t TSpsbListEventsArgs::binary_fingerprint[16] = {0x3B,0xB6,0xE4,0xA4,0x07,0xC9,0xEF,0x47,0xC0,0x79,0xEB,0x4F,0x1F,0x66,0xAC,0x10};

uint32_t TSpsbListEventsArgs::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast16;
          xfer += iprot->readI32(ecast16);
          this->version = (TSpsbListEventsVersion::type)ecast16;
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->requestMillis);
          this->__isset.requestMillis = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->requestNonce);
          this->__isset.requestNonce = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startEventMillis);
          this->__isset.startEventMillis = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->endEventMillis);
          this->__isset.endEventMillis = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->spCode);
          this->__isset.spCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 70:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userLogin);
          this->__isset.userLogin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 80:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->typeCode);
          this->__isset.typeCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 90:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resultCode);
          this->__isset.resultCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 100:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->attributeValues.clear();
            uint32_t _size17;
            ::apache::thrift::protocol::TType _ktype18;
            ::apache::thrift::protocol::TType _vtype19;
            xfer += iprot->readMapBegin(_ktype18, _vtype19, _size17);
            uint32_t _i21;
            for (_i21 = 0; _i21 < _size17; ++_i21)
            {
              std::string _key22;
              xfer += iprot->readString(_key22);
              std::string& _val23 = this->attributeValues[_key22];
              xfer += iprot->readString(_val23);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.attributeValues = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 110:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast24;
          xfer += iprot->readI32(ecast24);
          this->modifier = (TSpsbAttributeModifier::type)ecast24;
          this->__isset.modifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TSpsbListEventsArgs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TSpsbListEventsArgs");

  if (this->__isset.version) {
    xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32((int32_t)this->version);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.requestMillis) {
    xfer += oprot->writeFieldBegin("requestMillis", ::apache::thrift::protocol::T_I64, 20);
    xfer += oprot->writeI64(this->requestMillis);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.requestNonce) {
    xfer += oprot->writeFieldBegin("requestNonce", ::apache::thrift::protocol::T_STRING, 30);
    xfer += oprot->writeBinary(this->requestNonce);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.startEventMillis) {
    xfer += oprot->writeFieldBegin("startEventMillis", ::apache::thrift::protocol::T_I64, 40);
    xfer += oprot->writeI64(this->startEventMillis);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.endEventMillis) {
    xfer += oprot->writeFieldBegin("endEventMillis", ::apache::thrift::protocol::T_I64, 50);
    xfer += oprot->writeI64(this->endEventMillis);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.spCode) {
    xfer += oprot->writeFieldBegin("spCode", ::apache::thrift::protocol::T_STRING, 60);
    xfer += oprot->writeString(this->spCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.userLogin) {
    xfer += oprot->writeFieldBegin("userLogin", ::apache::thrift::protocol::T_STRING, 70);
    xfer += oprot->writeString(this->userLogin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.typeCode) {
    xfer += oprot->writeFieldBegin("typeCode", ::apache::thrift::protocol::T_STRING, 80);
    xfer += oprot->writeString(this->typeCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.resultCode) {
    xfer += oprot->writeFieldBegin("resultCode", ::apache::thrift::protocol::T_STRING, 90);
    xfer += oprot->writeString(this->resultCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attributeValues) {
    xfer += oprot->writeFieldBegin("attributeValues", ::apache::thrift::protocol::T_MAP, 100);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->attributeValues.size()));
      std::map<std::string, std::string> ::const_iterator _iter25;
      for (_iter25 = this->attributeValues.begin(); _iter25 != this->attributeValues.end(); ++_iter25)
      {
        xfer += oprot->writeString(_iter25->first);
        xfer += oprot->writeString(_iter25->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.modifier) {
    xfer += oprot->writeFieldBegin("modifier", ::apache::thrift::protocol::T_I32, 110);
    xfer += oprot->writeI32((int32_t)this->modifier);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TSpsbListEventsArgs &a, TSpsbListEventsArgs &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.requestMillis, b.requestMillis);
  swap(a.requestNonce, b.requestNonce);
  swap(a.startEventMillis, b.startEventMillis);
  swap(a.endEventMillis, b.endEventMillis);
  swap(a.spCode, b.spCode);
  swap(a.userLogin, b.userLogin);
  swap(a.typeCode, b.typeCode);
  swap(a.resultCode, b.resultCode);
  swap(a.attributeValues, b.attributeValues);
  swap(a.modifier, b.modifier);
  swap(a.__isset, b.__isset);
}

const char* TSpsbListEventsResult::ascii_fingerprint = "C6D54CCC35EEF2183FC4DD777E34EF9D";
const uint8_t TSpsbListEventsResult::binary_fingerprint[16] = {0xC6,0xD5,0x4C,0xCC,0x35,0xEE,0xF2,0x18,0x3F,0xC4,0xDD,0x77,0x7E,0x34,0xEF,0x9D};

uint32_t TSpsbListEventsResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->responseMillis);
          this->__isset.responseMillis = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->responseNonce);
          this->__isset.responseNonce = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast26;
          xfer += iprot->readI32(ecast26);
          this->result = (TSpSbExtOperationResult::type)ecast26;
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resultMessage);
          this->__isset.resultMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->events.clear();
            uint32_t _size27;
            ::apache::thrift::protocol::TType _etype30;
            xfer += iprot->readListBegin(_etype30, _size27);
            this->events.resize(_size27);
            uint32_t _i31;
            for (_i31 = 0; _i31 < _size27; ++_i31)
            {
              xfer += this->events[_i31].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.events = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TSpsbListEventsResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TSpsbListEventsResult");

  if (this->__isset.responseMillis) {
    xfer += oprot->writeFieldBegin("responseMillis", ::apache::thrift::protocol::T_I64, 10);
    xfer += oprot->writeI64(this->responseMillis);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.responseNonce) {
    xfer += oprot->writeFieldBegin("responseNonce", ::apache::thrift::protocol::T_STRING, 20);
    xfer += oprot->writeBinary(this->responseNonce);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.result) {
    xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_I32, 30);
    xfer += oprot->writeI32((int32_t)this->result);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.resultMessage) {
    xfer += oprot->writeFieldBegin("resultMessage", ::apache::thrift::protocol::T_STRING, 40);
    xfer += oprot->writeString(this->resultMessage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.events) {
    xfer += oprot->writeFieldBegin("events", ::apache::thrift::protocol::T_LIST, 50);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->events.size()));
      std::vector<TSpsbEvent> ::const_iterator _iter32;
      for (_iter32 = this->events.begin(); _iter32 != this->events.end(); ++_iter32)
      {
        xfer += (*_iter32).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TSpsbListEventsResult &a, TSpsbListEventsResult &b) {
  using ::std::swap;
  swap(a.responseMillis, b.responseMillis);
  swap(a.responseNonce, b.responseNonce);
  swap(a.result, b.result);
  swap(a.resultMessage, b.resultMessage);
  swap(a.events, b.events);
  swap(a.__isset, b.__isset);
}

} // namespace
