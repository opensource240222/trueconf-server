/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "cciUserCommonV1_types.h"

#include <algorithm>

namespace sudis {

const char* TCciUserV1::ascii_fingerprint = "3B164AD3E007FCC6EFEE33DFC4975B96";
const uint8_t TCciUserV1::binary_fingerprint[16] = {0x3B,0x16,0x4A,0xD3,0xE0,0x07,0xFC,0xC6,0xEF,0xEE,0x33,0xDF,0xC4,0x97,0x5B,0x96};

uint32_t TCciUserV1::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_firstName = false;
  bool isset_lastName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->firstName);
          isset_firstName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->secondName);
          this->__isset.secondName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lastName);
          isset_lastName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->login);
          this->__isset.login = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->birthDate);
          this->__isset.birthDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->position);
          this->__isset.position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->department);
          this->__isset.department = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isBlocked);
          this->__isset.isBlocked = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_firstName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lastName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TCciUserV1::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TCciUserV1");

  xfer += oprot->writeFieldBegin("firstName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->firstName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.secondName) {
    xfer += oprot->writeFieldBegin("secondName", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->secondName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("lastName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->lastName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.login) {
    xfer += oprot->writeFieldBegin("login", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->login);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.birthDate) {
    xfer += oprot->writeFieldBegin("birthDate", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->birthDate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.position) {
    xfer += oprot->writeFieldBegin("position", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->position);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.department) {
    xfer += oprot->writeFieldBegin("department", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->department);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isBlocked) {
    xfer += oprot->writeFieldBegin("isBlocked", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->isBlocked);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TCciUserV1 &a, TCciUserV1 &b) {
  using ::std::swap;
  swap(a.firstName, b.firstName);
  swap(a.secondName, b.secondName);
  swap(a.lastName, b.lastName);
  swap(a.login, b.login);
  swap(a.birthDate, b.birthDate);
  swap(a.position, b.position);
  swap(a.department, b.department);
  swap(a.isBlocked, b.isBlocked);
  swap(a.__isset, b.__isset);
}

} // namespace
