/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "cciUserLogoutV1_types.h"

#include <algorithm>

namespace sudis {

const char* TCciUserLogoutV1Request::ascii_fingerprint = "AB879940BD15B6B25691265F7384B271";
const uint8_t TCciUserLogoutV1Request::binary_fingerprint[16] = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

uint32_t TCciUserLogoutV1Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_requestDateTime = false;
  bool isset_requestNonce = false;
  bool isset_userTokenId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->requestDateTime);
          isset_requestDateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->requestNonce);
          isset_requestNonce = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userTokenId);
          isset_userTokenId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_requestDateTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_requestNonce)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_userTokenId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TCciUserLogoutV1Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TCciUserLogoutV1Request");

  xfer += oprot->writeFieldBegin("requestDateTime", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->requestDateTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("requestNonce", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->requestNonce);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userTokenId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->userTokenId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TCciUserLogoutV1Request &a, TCciUserLogoutV1Request &b) {
  using ::std::swap;
  swap(a.requestDateTime, b.requestDateTime);
  swap(a.requestNonce, b.requestNonce);
  swap(a.userTokenId, b.userTokenId);
}

const char* TCciUserLogoutV1Response::ascii_fingerprint = "1AF705D5F455F35C4A25DA3E505892A5";
const uint8_t TCciUserLogoutV1Response::binary_fingerprint[16] = {0x1A,0xF7,0x05,0xD5,0xF4,0x55,0xF3,0x5C,0x4A,0x25,0xDA,0x3E,0x50,0x58,0x92,0xA5};

uint32_t TCciUserLogoutV1Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_responseDateTime = false;
  bool isset_responseNonce = false;
  bool isset_resultMessage = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->responseDateTime);
          isset_responseDateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->responseNonce);
          isset_responseNonce = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->resultMessage.read(iprot);
          isset_resultMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_responseDateTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_responseNonce)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_resultMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TCciUserLogoutV1Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TCciUserLogoutV1Response");

  xfer += oprot->writeFieldBegin("responseDateTime", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->responseDateTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("responseNonce", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->responseNonce);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("resultMessage", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->resultMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TCciUserLogoutV1Response &a, TCciUserLogoutV1Response &b) {
  using ::std::swap;
  swap(a.responseDateTime, b.responseDateTime);
  swap(a.responseNonce, b.responseNonce);
  swap(a.resultMessage, b.resultMessage);
}

} // namespace
