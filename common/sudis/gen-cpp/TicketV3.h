/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TicketV3_H
#define TicketV3_H

#include <thrift/TDispatchProcessor.h>
#include "ticketV3_types.h"



class TicketV3If {
 public:
  virtual ~TicketV3If() {}
  virtual void getTicket(TicketV3Response& _return, const TicketV3Request& request) = 0;
};

class TicketV3IfFactory {
 public:
  typedef TicketV3If Handler;

  virtual ~TicketV3IfFactory() {}

  virtual TicketV3If* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TicketV3If* /* handler */) = 0;
};

class TicketV3IfSingletonFactory : virtual public TicketV3IfFactory {
 public:
  TicketV3IfSingletonFactory(const boost::shared_ptr<TicketV3If>& iface) : iface_(iface) {}
  virtual ~TicketV3IfSingletonFactory() {}

  virtual TicketV3If* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TicketV3If* /* handler */) {}

 protected:
  boost::shared_ptr<TicketV3If> iface_;
};

class TicketV3Null : virtual public TicketV3If {
 public:
  virtual ~TicketV3Null() {}
  void getTicket(TicketV3Response& /* _return */, const TicketV3Request& /* request */) {
    return;
  }
};

typedef struct _TicketV3_getTicket_args__isset {
  _TicketV3_getTicket_args__isset() : request(false) {}
  bool request;
} _TicketV3_getTicket_args__isset;

class TicketV3_getTicket_args {
 public:

  TicketV3_getTicket_args() {
  }

  virtual ~TicketV3_getTicket_args() throw() {}

  TicketV3Request request;

  _TicketV3_getTicket_args__isset __isset;

  void __set_request(const TicketV3Request& val) {
    request = val;
  }

  bool operator == (const TicketV3_getTicket_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TicketV3_getTicket_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TicketV3_getTicket_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TicketV3_getTicket_pargs {
 public:


  virtual ~TicketV3_getTicket_pargs() throw() {}

  const TicketV3Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TicketV3_getTicket_result__isset {
  _TicketV3_getTicket_result__isset() : success(false) {}
  bool success;
} _TicketV3_getTicket_result__isset;

class TicketV3_getTicket_result {
 public:

  TicketV3_getTicket_result() {
  }

  virtual ~TicketV3_getTicket_result() throw() {}

  TicketV3Response success;

  _TicketV3_getTicket_result__isset __isset;

  void __set_success(const TicketV3Response& val) {
    success = val;
  }

  bool operator == (const TicketV3_getTicket_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TicketV3_getTicket_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TicketV3_getTicket_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TicketV3_getTicket_presult__isset {
  _TicketV3_getTicket_presult__isset() : success(false) {}
  bool success;
} _TicketV3_getTicket_presult__isset;

class TicketV3_getTicket_presult {
 public:


  virtual ~TicketV3_getTicket_presult() throw() {}

  TicketV3Response* success;

  _TicketV3_getTicket_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TicketV3Client : virtual public TicketV3If {
 public:
  TicketV3Client(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TicketV3Client(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getTicket(TicketV3Response& _return, const TicketV3Request& request);
  void send_getTicket(const TicketV3Request& request);
  void recv_getTicket(TicketV3Response& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TicketV3Processor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TicketV3If> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TicketV3Processor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getTicket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TicketV3Processor(boost::shared_ptr<TicketV3If> iface) :
    iface_(iface) {
    processMap_["getTicket"] = &TicketV3Processor::process_getTicket;
  }

  virtual ~TicketV3Processor() {}
};

class TicketV3ProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TicketV3ProcessorFactory(const ::boost::shared_ptr< TicketV3IfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TicketV3IfFactory > handlerFactory_;
};

class TicketV3Multiface : virtual public TicketV3If {
 public:
  TicketV3Multiface(std::vector<boost::shared_ptr<TicketV3If> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TicketV3Multiface() {}
 protected:
  std::vector<boost::shared_ptr<TicketV3If> > ifaces_;
  TicketV3Multiface() {}
  void add(boost::shared_ptr<TicketV3If> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getTicket(TicketV3Response& _return, const TicketV3Request& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTicket(_return, request);
    }
    ifaces_[i]->getTicket(_return, request);
    return;
  }

};



#endif
