/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "cciRoleCommonV1_types.h"

#include <algorithm>

namespace sudis {

int _kTCciRoleSubjectValues[] = {
  TCciRoleSubject::USER,
  TCciRoleSubject::SP
};
const char* _kTCciRoleSubjectNames[] = {
  "USER",
  "SP"
};
const std::map<int, const char*> _TCciRoleSubject_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTCciRoleSubjectValues, _kTCciRoleSubjectNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* TCciRoleV1::ascii_fingerprint = "3CA32BDB4DB983237A10878C2E9963C6";
const uint8_t TCciRoleV1::binary_fingerprint[16] = {0x3C,0xA3,0x2B,0xDB,0x4D,0xB9,0x83,0x23,0x7A,0x10,0x87,0x8C,0x2E,0x99,0x63,0xC6};

uint32_t TCciRoleV1::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_spCode = false;
  bool isset_mnemonic = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->spCode);
          isset_spCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mnemonic);
          isset_mnemonic = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enabled);
          this->__isset.enabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->roleSubject = (TCciRoleSubject::type)ecast0;
          this->__isset.roleSubject = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_spCode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_mnemonic)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TCciRoleV1::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TCciRoleV1");

  xfer += oprot->writeFieldBegin("spCode", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->spCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mnemonic", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->mnemonic);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enabled) {
    xfer += oprot->writeFieldBegin("enabled", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->enabled);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.roleSubject) {
    xfer += oprot->writeFieldBegin("roleSubject", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32((int32_t)this->roleSubject);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TCciRoleV1 &a, TCciRoleV1 &b) {
  using ::std::swap;
  swap(a.spCode, b.spCode);
  swap(a.mnemonic, b.mnemonic);
  swap(a.name, b.name);
  swap(a.enabled, b.enabled);
  swap(a.roleSubject, b.roleSubject);
  swap(a.__isset, b.__isset);
}

} // namespace
