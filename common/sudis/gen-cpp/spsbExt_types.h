/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef spsbExt_TYPES_H
#define spsbExt_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "spsbCommon_types.h"


namespace spsb {

struct TSpsbAttributeModifier {
  enum type {
    ANY = 1,
    SOME = 2,
    ALL = 3
  };
};

extern const std::map<int, const char*> _TSpsbAttributeModifier_VALUES_TO_NAMES;

struct TSpSbExtOperationResult {
  enum type {
    SUCCESS = 1,
    ERROR_INTERNAL = 2,
    REQUEST_REPLAY_RESTRICTED = 3,
    REQUEST_EXPIRED = 4,
    REQUEST_NONCE_NOT_VALID = 5,
    SP_PERMISSION_DENIED = 6,
    SP_ACCOUNT_BLOCKED = 7,
    SP_NOT_AUTHENTICATED = 8
  };
};

extern const std::map<int, const char*> _TSpSbExtOperationResult_VALUES_TO_NAMES;

struct TSpsbPingVersion {
  enum type {
    V1 = 1
  };
};

extern const std::map<int, const char*> _TSpsbPingVersion_VALUES_TO_NAMES;

struct TSpsbLogEventVersion {
  enum type {
    V1 = 1
  };
};

extern const std::map<int, const char*> _TSpsbLogEventVersion_VALUES_TO_NAMES;

struct TSpsbListEventsVersion {
  enum type {
    V1 = 1
  };
};

extern const std::map<int, const char*> _TSpsbListEventsVersion_VALUES_TO_NAMES;

typedef struct _TSpsbEvent__isset {
  _TSpsbEvent__isset() : eventMillis(true), spCode(true), userLogin(true), typeCode(true), resultCode(true), attributesValues(false), ipAddress(true) {}
  bool eventMillis;
  bool spCode;
  bool userLogin;
  bool typeCode;
  bool resultCode;
  bool attributesValues;
  bool ipAddress;
} _TSpsbEvent__isset;

class TSpsbEvent {
 public:

  static const char* ascii_fingerprint; // = "290F5B989B6BDB4F7C95A2A70E09300C";
  static const uint8_t binary_fingerprint[16]; // = {0x29,0x0F,0x5B,0x98,0x9B,0x6B,0xDB,0x4F,0x7C,0x95,0xA2,0xA7,0x0E,0x09,0x30,0x0C};

  TSpsbEvent() : eventMillis(0LL), spCode("undefined"), userLogin("undefined"), typeCode("undefined"), resultCode("undefined"), ipAddress("undefined") {
  }

  virtual ~TSpsbEvent() throw() {}

  int64_t eventMillis;
  std::string spCode;
  std::string userLogin;
  std::string typeCode;
  std::string resultCode;
  std::vector< ::spsb::TSpsbEventAttributeValue>  attributesValues;
  std::string ipAddress;

  _TSpsbEvent__isset __isset;

  void __set_eventMillis(const int64_t val) {
    eventMillis = val;
    __isset.eventMillis = true;
  }

  void __set_spCode(const std::string& val) {
    spCode = val;
    __isset.spCode = true;
  }

  void __set_userLogin(const std::string& val) {
    userLogin = val;
    __isset.userLogin = true;
  }

  void __set_typeCode(const std::string& val) {
    typeCode = val;
    __isset.typeCode = true;
  }

  void __set_resultCode(const std::string& val) {
    resultCode = val;
    __isset.resultCode = true;
  }

  void __set_attributesValues(const std::vector< ::spsb::TSpsbEventAttributeValue> & val) {
    attributesValues = val;
    __isset.attributesValues = true;
  }

  void __set_ipAddress(const std::string& val) {
    ipAddress = val;
    __isset.ipAddress = true;
  }

  bool operator == (const TSpsbEvent & rhs) const
  {
    if (__isset.eventMillis != rhs.__isset.eventMillis)
      return false;
    else if (__isset.eventMillis && !(eventMillis == rhs.eventMillis))
      return false;
    if (__isset.spCode != rhs.__isset.spCode)
      return false;
    else if (__isset.spCode && !(spCode == rhs.spCode))
      return false;
    if (__isset.userLogin != rhs.__isset.userLogin)
      return false;
    else if (__isset.userLogin && !(userLogin == rhs.userLogin))
      return false;
    if (__isset.typeCode != rhs.__isset.typeCode)
      return false;
    else if (__isset.typeCode && !(typeCode == rhs.typeCode))
      return false;
    if (__isset.resultCode != rhs.__isset.resultCode)
      return false;
    else if (__isset.resultCode && !(resultCode == rhs.resultCode))
      return false;
    if (__isset.attributesValues != rhs.__isset.attributesValues)
      return false;
    else if (__isset.attributesValues && !(attributesValues == rhs.attributesValues))
      return false;
    if (__isset.ipAddress != rhs.__isset.ipAddress)
      return false;
    else if (__isset.ipAddress && !(ipAddress == rhs.ipAddress))
      return false;
    return true;
  }
  bool operator != (const TSpsbEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSpsbEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TSpsbEvent &a, TSpsbEvent &b);

typedef struct _TSpsbPingArgs__isset {
  _TSpsbPingArgs__isset() : version(true), requestMillis(true), requestNonce(false) {}
  bool version;
  bool requestMillis;
  bool requestNonce;
} _TSpsbPingArgs__isset;

class TSpsbPingArgs {
 public:

  static const char* ascii_fingerprint; // = "8C4277FAB59ADB4EC070272B884CCE20";
  static const uint8_t binary_fingerprint[16]; // = {0x8C,0x42,0x77,0xFA,0xB5,0x9A,0xDB,0x4E,0xC0,0x70,0x27,0x2B,0x88,0x4C,0xCE,0x20};

  TSpsbPingArgs() : version((TSpsbPingVersion::type)1), requestMillis(0LL), requestNonce() {
    version = (TSpsbPingVersion::type)1;

  }

  virtual ~TSpsbPingArgs() throw() {}

  TSpsbPingVersion::type version;
  int64_t requestMillis;
  std::string requestNonce;

  _TSpsbPingArgs__isset __isset;

  void __set_version(const TSpsbPingVersion::type val) {
    version = val;
    __isset.version = true;
  }

  void __set_requestMillis(const int64_t val) {
    requestMillis = val;
    __isset.requestMillis = true;
  }

  void __set_requestNonce(const std::string& val) {
    requestNonce = val;
    __isset.requestNonce = true;
  }

  bool operator == (const TSpsbPingArgs & rhs) const
  {
    if (__isset.version != rhs.__isset.version)
      return false;
    else if (__isset.version && !(version == rhs.version))
      return false;
    if (__isset.requestMillis != rhs.__isset.requestMillis)
      return false;
    else if (__isset.requestMillis && !(requestMillis == rhs.requestMillis))
      return false;
    if (__isset.requestNonce != rhs.__isset.requestNonce)
      return false;
    else if (__isset.requestNonce && !(requestNonce == rhs.requestNonce))
      return false;
    return true;
  }
  bool operator != (const TSpsbPingArgs &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSpsbPingArgs & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TSpsbPingArgs &a, TSpsbPingArgs &b);

typedef struct _TSpsbPingResult__isset {
  _TSpsbPingResult__isset() : responseMillis(true), responseNonce(false), result(true), resultMessage(true) {}
  bool responseMillis;
  bool responseNonce;
  bool result;
  bool resultMessage;
} _TSpsbPingResult__isset;

class TSpsbPingResult {
 public:

  static const char* ascii_fingerprint; // = "A2E25E9E1B6658C5FA455CC4695B2DE0";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xE2,0x5E,0x9E,0x1B,0x66,0x58,0xC5,0xFA,0x45,0x5C,0xC4,0x69,0x5B,0x2D,0xE0};

  TSpsbPingResult() : responseMillis(0LL), responseNonce(), result((TSpSbExtOperationResult::type)1), resultMessage("") {
    result = (TSpSbExtOperationResult::type)1;

  }

  virtual ~TSpsbPingResult() throw() {}

  int64_t responseMillis;
  std::string responseNonce;
  TSpSbExtOperationResult::type result;
  std::string resultMessage;

  _TSpsbPingResult__isset __isset;

  void __set_responseMillis(const int64_t val) {
    responseMillis = val;
    __isset.responseMillis = true;
  }

  void __set_responseNonce(const std::string& val) {
    responseNonce = val;
    __isset.responseNonce = true;
  }

  void __set_result(const TSpSbExtOperationResult::type val) {
    result = val;
    __isset.result = true;
  }

  void __set_resultMessage(const std::string& val) {
    resultMessage = val;
    __isset.resultMessage = true;
  }

  bool operator == (const TSpsbPingResult & rhs) const
  {
    if (__isset.responseMillis != rhs.__isset.responseMillis)
      return false;
    else if (__isset.responseMillis && !(responseMillis == rhs.responseMillis))
      return false;
    if (__isset.responseNonce != rhs.__isset.responseNonce)
      return false;
    else if (__isset.responseNonce && !(responseNonce == rhs.responseNonce))
      return false;
    if (__isset.result != rhs.__isset.result)
      return false;
    else if (__isset.result && !(result == rhs.result))
      return false;
    if (__isset.resultMessage != rhs.__isset.resultMessage)
      return false;
    else if (__isset.resultMessage && !(resultMessage == rhs.resultMessage))
      return false;
    return true;
  }
  bool operator != (const TSpsbPingResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSpsbPingResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TSpsbPingResult &a, TSpsbPingResult &b);

typedef struct _TSpsbLogEventArgs__isset {
  _TSpsbLogEventArgs__isset() : version(true), requestMillis(true), requestNonce(false), events(false) {}
  bool version;
  bool requestMillis;
  bool requestNonce;
  bool events;
} _TSpsbLogEventArgs__isset;

class TSpsbLogEventArgs {
 public:

  static const char* ascii_fingerprint; // = "089F8E189F45E343D9AEE99CA772C18C";
  static const uint8_t binary_fingerprint[16]; // = {0x08,0x9F,0x8E,0x18,0x9F,0x45,0xE3,0x43,0xD9,0xAE,0xE9,0x9C,0xA7,0x72,0xC1,0x8C};

  TSpsbLogEventArgs() : version((TSpsbLogEventVersion::type)1), requestMillis(0LL), requestNonce() {
    version = (TSpsbLogEventVersion::type)1;

  }

  virtual ~TSpsbLogEventArgs() throw() {}

  TSpsbLogEventVersion::type version;
  int64_t requestMillis;
  std::string requestNonce;
  std::vector<TSpsbEvent>  events;

  _TSpsbLogEventArgs__isset __isset;

  void __set_version(const TSpsbLogEventVersion::type val) {
    version = val;
    __isset.version = true;
  }

  void __set_requestMillis(const int64_t val) {
    requestMillis = val;
    __isset.requestMillis = true;
  }

  void __set_requestNonce(const std::string& val) {
    requestNonce = val;
    __isset.requestNonce = true;
  }

  void __set_events(const std::vector<TSpsbEvent> & val) {
    events = val;
    __isset.events = true;
  }

  bool operator == (const TSpsbLogEventArgs & rhs) const
  {
    if (__isset.version != rhs.__isset.version)
      return false;
    else if (__isset.version && !(version == rhs.version))
      return false;
    if (__isset.requestMillis != rhs.__isset.requestMillis)
      return false;
    else if (__isset.requestMillis && !(requestMillis == rhs.requestMillis))
      return false;
    if (__isset.requestNonce != rhs.__isset.requestNonce)
      return false;
    else if (__isset.requestNonce && !(requestNonce == rhs.requestNonce))
      return false;
    if (__isset.events != rhs.__isset.events)
      return false;
    else if (__isset.events && !(events == rhs.events))
      return false;
    return true;
  }
  bool operator != (const TSpsbLogEventArgs &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSpsbLogEventArgs & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TSpsbLogEventArgs &a, TSpsbLogEventArgs &b);

typedef struct _TSpsbLogEventResult__isset {
  _TSpsbLogEventResult__isset() : responseMillis(true), responseNonce(false), result(true), resultMessage(true) {}
  bool responseMillis;
  bool responseNonce;
  bool result;
  bool resultMessage;
} _TSpsbLogEventResult__isset;

class TSpsbLogEventResult {
 public:

  static const char* ascii_fingerprint; // = "A2E25E9E1B6658C5FA455CC4695B2DE0";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xE2,0x5E,0x9E,0x1B,0x66,0x58,0xC5,0xFA,0x45,0x5C,0xC4,0x69,0x5B,0x2D,0xE0};

  TSpsbLogEventResult() : responseMillis(0LL), responseNonce(), result((TSpSbExtOperationResult::type)1), resultMessage("") {
    result = (TSpSbExtOperationResult::type)1;

  }

  virtual ~TSpsbLogEventResult() throw() {}

  int64_t responseMillis;
  std::string responseNonce;
  TSpSbExtOperationResult::type result;
  std::string resultMessage;

  _TSpsbLogEventResult__isset __isset;

  void __set_responseMillis(const int64_t val) {
    responseMillis = val;
    __isset.responseMillis = true;
  }

  void __set_responseNonce(const std::string& val) {
    responseNonce = val;
    __isset.responseNonce = true;
  }

  void __set_result(const TSpSbExtOperationResult::type val) {
    result = val;
    __isset.result = true;
  }

  void __set_resultMessage(const std::string& val) {
    resultMessage = val;
    __isset.resultMessage = true;
  }

  bool operator == (const TSpsbLogEventResult & rhs) const
  {
    if (__isset.responseMillis != rhs.__isset.responseMillis)
      return false;
    else if (__isset.responseMillis && !(responseMillis == rhs.responseMillis))
      return false;
    if (__isset.responseNonce != rhs.__isset.responseNonce)
      return false;
    else if (__isset.responseNonce && !(responseNonce == rhs.responseNonce))
      return false;
    if (__isset.result != rhs.__isset.result)
      return false;
    else if (__isset.result && !(result == rhs.result))
      return false;
    if (__isset.resultMessage != rhs.__isset.resultMessage)
      return false;
    else if (__isset.resultMessage && !(resultMessage == rhs.resultMessage))
      return false;
    return true;
  }
  bool operator != (const TSpsbLogEventResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSpsbLogEventResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TSpsbLogEventResult &a, TSpsbLogEventResult &b);

typedef struct _TSpsbListEventsArgs__isset {
  _TSpsbListEventsArgs__isset() : version(true), requestMillis(true), requestNonce(false), startEventMillis(true), endEventMillis(true), spCode(true), userLogin(true), typeCode(true), resultCode(true), attributeValues(false), modifier(true) {}
  bool version;
  bool requestMillis;
  bool requestNonce;
  bool startEventMillis;
  bool endEventMillis;
  bool spCode;
  bool userLogin;
  bool typeCode;
  bool resultCode;
  bool attributeValues;
  bool modifier;
} _TSpsbListEventsArgs__isset;

class TSpsbListEventsArgs {
 public:

  static const char* ascii_fingerprint; // = "3BB6E4A407C9EF47C079EB4F1F66AC10";
  static const uint8_t binary_fingerprint[16]; // = {0x3B,0xB6,0xE4,0xA4,0x07,0xC9,0xEF,0x47,0xC0,0x79,0xEB,0x4F,0x1F,0x66,0xAC,0x10};

  TSpsbListEventsArgs() : version((TSpsbListEventsVersion::type)1), requestMillis(0LL), requestNonce(), startEventMillis(0LL), endEventMillis(0LL), spCode("undefined"), userLogin("undefined"), typeCode("undefined"), resultCode("undefined"), modifier((TSpsbAttributeModifier::type)1) {
    version = (TSpsbListEventsVersion::type)1;

    modifier = (TSpsbAttributeModifier::type)1;

  }

  virtual ~TSpsbListEventsArgs() throw() {}

  TSpsbListEventsVersion::type version;
  int64_t requestMillis;
  std::string requestNonce;
  int64_t startEventMillis;
  int64_t endEventMillis;
  std::string spCode;
  std::string userLogin;
  std::string typeCode;
  std::string resultCode;
  std::map<std::string, std::string>  attributeValues;
  TSpsbAttributeModifier::type modifier;

  _TSpsbListEventsArgs__isset __isset;

  void __set_version(const TSpsbListEventsVersion::type val) {
    version = val;
    __isset.version = true;
  }

  void __set_requestMillis(const int64_t val) {
    requestMillis = val;
    __isset.requestMillis = true;
  }

  void __set_requestNonce(const std::string& val) {
    requestNonce = val;
    __isset.requestNonce = true;
  }

  void __set_startEventMillis(const int64_t val) {
    startEventMillis = val;
    __isset.startEventMillis = true;
  }

  void __set_endEventMillis(const int64_t val) {
    endEventMillis = val;
    __isset.endEventMillis = true;
  }

  void __set_spCode(const std::string& val) {
    spCode = val;
    __isset.spCode = true;
  }

  void __set_userLogin(const std::string& val) {
    userLogin = val;
    __isset.userLogin = true;
  }

  void __set_typeCode(const std::string& val) {
    typeCode = val;
    __isset.typeCode = true;
  }

  void __set_resultCode(const std::string& val) {
    resultCode = val;
    __isset.resultCode = true;
  }

  void __set_attributeValues(const std::map<std::string, std::string> & val) {
    attributeValues = val;
    __isset.attributeValues = true;
  }

  void __set_modifier(const TSpsbAttributeModifier::type val) {
    modifier = val;
    __isset.modifier = true;
  }

  bool operator == (const TSpsbListEventsArgs & rhs) const
  {
    if (__isset.version != rhs.__isset.version)
      return false;
    else if (__isset.version && !(version == rhs.version))
      return false;
    if (__isset.requestMillis != rhs.__isset.requestMillis)
      return false;
    else if (__isset.requestMillis && !(requestMillis == rhs.requestMillis))
      return false;
    if (__isset.requestNonce != rhs.__isset.requestNonce)
      return false;
    else if (__isset.requestNonce && !(requestNonce == rhs.requestNonce))
      return false;
    if (__isset.startEventMillis != rhs.__isset.startEventMillis)
      return false;
    else if (__isset.startEventMillis && !(startEventMillis == rhs.startEventMillis))
      return false;
    if (__isset.endEventMillis != rhs.__isset.endEventMillis)
      return false;
    else if (__isset.endEventMillis && !(endEventMillis == rhs.endEventMillis))
      return false;
    if (__isset.spCode != rhs.__isset.spCode)
      return false;
    else if (__isset.spCode && !(spCode == rhs.spCode))
      return false;
    if (__isset.userLogin != rhs.__isset.userLogin)
      return false;
    else if (__isset.userLogin && !(userLogin == rhs.userLogin))
      return false;
    if (__isset.typeCode != rhs.__isset.typeCode)
      return false;
    else if (__isset.typeCode && !(typeCode == rhs.typeCode))
      return false;
    if (__isset.resultCode != rhs.__isset.resultCode)
      return false;
    else if (__isset.resultCode && !(resultCode == rhs.resultCode))
      return false;
    if (__isset.attributeValues != rhs.__isset.attributeValues)
      return false;
    else if (__isset.attributeValues && !(attributeValues == rhs.attributeValues))
      return false;
    if (__isset.modifier != rhs.__isset.modifier)
      return false;
    else if (__isset.modifier && !(modifier == rhs.modifier))
      return false;
    return true;
  }
  bool operator != (const TSpsbListEventsArgs &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSpsbListEventsArgs & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TSpsbListEventsArgs &a, TSpsbListEventsArgs &b);

typedef struct _TSpsbListEventsResult__isset {
  _TSpsbListEventsResult__isset() : responseMillis(true), responseNonce(false), result(true), resultMessage(true), events(false) {}
  bool responseMillis;
  bool responseNonce;
  bool result;
  bool resultMessage;
  bool events;
} _TSpsbListEventsResult__isset;

class TSpsbListEventsResult {
 public:

  static const char* ascii_fingerprint; // = "C6D54CCC35EEF2183FC4DD777E34EF9D";
  static const uint8_t binary_fingerprint[16]; // = {0xC6,0xD5,0x4C,0xCC,0x35,0xEE,0xF2,0x18,0x3F,0xC4,0xDD,0x77,0x7E,0x34,0xEF,0x9D};

  TSpsbListEventsResult() : responseMillis(0LL), responseNonce(), result((TSpSbExtOperationResult::type)1), resultMessage("") {
    result = (TSpSbExtOperationResult::type)1;

  }

  virtual ~TSpsbListEventsResult() throw() {}

  int64_t responseMillis;
  std::string responseNonce;
  TSpSbExtOperationResult::type result;
  std::string resultMessage;
  std::vector<TSpsbEvent>  events;

  _TSpsbListEventsResult__isset __isset;

  void __set_responseMillis(const int64_t val) {
    responseMillis = val;
    __isset.responseMillis = true;
  }

  void __set_responseNonce(const std::string& val) {
    responseNonce = val;
    __isset.responseNonce = true;
  }

  void __set_result(const TSpSbExtOperationResult::type val) {
    result = val;
    __isset.result = true;
  }

  void __set_resultMessage(const std::string& val) {
    resultMessage = val;
    __isset.resultMessage = true;
  }

  void __set_events(const std::vector<TSpsbEvent> & val) {
    events = val;
    __isset.events = true;
  }

  bool operator == (const TSpsbListEventsResult & rhs) const
  {
    if (__isset.responseMillis != rhs.__isset.responseMillis)
      return false;
    else if (__isset.responseMillis && !(responseMillis == rhs.responseMillis))
      return false;
    if (__isset.responseNonce != rhs.__isset.responseNonce)
      return false;
    else if (__isset.responseNonce && !(responseNonce == rhs.responseNonce))
      return false;
    if (__isset.result != rhs.__isset.result)
      return false;
    else if (__isset.result && !(result == rhs.result))
      return false;
    if (__isset.resultMessage != rhs.__isset.resultMessage)
      return false;
    else if (__isset.resultMessage && !(resultMessage == rhs.resultMessage))
      return false;
    if (__isset.events != rhs.__isset.events)
      return false;
    else if (__isset.events && !(events == rhs.events))
      return false;
    return true;
  }
  bool operator != (const TSpsbListEventsResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSpsbListEventsResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TSpsbListEventsResult &a, TSpsbListEventsResult &b);

} // namespace

#endif
