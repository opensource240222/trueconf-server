/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TCciUserLogoutV1_H
#define TCciUserLogoutV1_H

#include <thrift/TDispatchProcessor.h>
#include "cciUserLogoutV1_types.h"

namespace sudis {

class TCciUserLogoutV1If {
 public:
  virtual ~TCciUserLogoutV1If() {}
  virtual void cciUserLogoutV1(TCciUserLogoutV1Response& _return, const TCciUserLogoutV1Request& request) = 0;
  virtual void cciUserLogoutV1Echo1(TCciUserLogoutV1Request& _return, const TCciUserLogoutV1Request& request) = 0;
  virtual void cciUserLogoutV1Echo2(TCciUserLogoutV1Response& _return, const TCciUserLogoutV1Response& response) = 0;
};

class TCciUserLogoutV1IfFactory {
 public:
  typedef TCciUserLogoutV1If Handler;

  virtual ~TCciUserLogoutV1IfFactory() {}

  virtual TCciUserLogoutV1If* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TCciUserLogoutV1If* /* handler */) = 0;
};

class TCciUserLogoutV1IfSingletonFactory : virtual public TCciUserLogoutV1IfFactory {
 public:
  TCciUserLogoutV1IfSingletonFactory(const boost::shared_ptr<TCciUserLogoutV1If>& iface) : iface_(iface) {}
  virtual ~TCciUserLogoutV1IfSingletonFactory() {}

  virtual TCciUserLogoutV1If* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TCciUserLogoutV1If* /* handler */) {}

 protected:
  boost::shared_ptr<TCciUserLogoutV1If> iface_;
};

class TCciUserLogoutV1Null : virtual public TCciUserLogoutV1If {
 public:
  virtual ~TCciUserLogoutV1Null() {}
  void cciUserLogoutV1(TCciUserLogoutV1Response& /* _return */, const TCciUserLogoutV1Request& /* request */) {
    return;
  }
  void cciUserLogoutV1Echo1(TCciUserLogoutV1Request& /* _return */, const TCciUserLogoutV1Request& /* request */) {
    return;
  }
  void cciUserLogoutV1Echo2(TCciUserLogoutV1Response& /* _return */, const TCciUserLogoutV1Response& /* response */) {
    return;
  }
};

typedef struct _TCciUserLogoutV1_cciUserLogoutV1_args__isset {
  _TCciUserLogoutV1_cciUserLogoutV1_args__isset() : request(false) {}
  bool request;
} _TCciUserLogoutV1_cciUserLogoutV1_args__isset;

class TCciUserLogoutV1_cciUserLogoutV1_args {
 public:

  TCciUserLogoutV1_cciUserLogoutV1_args() {
  }

  virtual ~TCciUserLogoutV1_cciUserLogoutV1_args() throw() {}

  TCciUserLogoutV1Request request;

  _TCciUserLogoutV1_cciUserLogoutV1_args__isset __isset;

  void __set_request(const TCciUserLogoutV1Request& val) {
    request = val;
  }

  bool operator == (const TCciUserLogoutV1_cciUserLogoutV1_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TCciUserLogoutV1_cciUserLogoutV1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCciUserLogoutV1_cciUserLogoutV1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TCciUserLogoutV1_cciUserLogoutV1_pargs {
 public:


  virtual ~TCciUserLogoutV1_cciUserLogoutV1_pargs() throw() {}

  const TCciUserLogoutV1Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TCciUserLogoutV1_cciUserLogoutV1_result__isset {
  _TCciUserLogoutV1_cciUserLogoutV1_result__isset() : success(false) {}
  bool success;
} _TCciUserLogoutV1_cciUserLogoutV1_result__isset;

class TCciUserLogoutV1_cciUserLogoutV1_result {
 public:

  TCciUserLogoutV1_cciUserLogoutV1_result() {
  }

  virtual ~TCciUserLogoutV1_cciUserLogoutV1_result() throw() {}

  TCciUserLogoutV1Response success;

  _TCciUserLogoutV1_cciUserLogoutV1_result__isset __isset;

  void __set_success(const TCciUserLogoutV1Response& val) {
    success = val;
  }

  bool operator == (const TCciUserLogoutV1_cciUserLogoutV1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TCciUserLogoutV1_cciUserLogoutV1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCciUserLogoutV1_cciUserLogoutV1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TCciUserLogoutV1_cciUserLogoutV1_presult__isset {
  _TCciUserLogoutV1_cciUserLogoutV1_presult__isset() : success(false) {}
  bool success;
} _TCciUserLogoutV1_cciUserLogoutV1_presult__isset;

class TCciUserLogoutV1_cciUserLogoutV1_presult {
 public:


  virtual ~TCciUserLogoutV1_cciUserLogoutV1_presult() throw() {}

  TCciUserLogoutV1Response* success;

  _TCciUserLogoutV1_cciUserLogoutV1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TCciUserLogoutV1_cciUserLogoutV1Echo1_args__isset {
  _TCciUserLogoutV1_cciUserLogoutV1Echo1_args__isset() : request(false) {}
  bool request;
} _TCciUserLogoutV1_cciUserLogoutV1Echo1_args__isset;

class TCciUserLogoutV1_cciUserLogoutV1Echo1_args {
 public:

  TCciUserLogoutV1_cciUserLogoutV1Echo1_args() {
  }

  virtual ~TCciUserLogoutV1_cciUserLogoutV1Echo1_args() throw() {}

  TCciUserLogoutV1Request request;

  _TCciUserLogoutV1_cciUserLogoutV1Echo1_args__isset __isset;

  void __set_request(const TCciUserLogoutV1Request& val) {
    request = val;
  }

  bool operator == (const TCciUserLogoutV1_cciUserLogoutV1Echo1_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TCciUserLogoutV1_cciUserLogoutV1Echo1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCciUserLogoutV1_cciUserLogoutV1Echo1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TCciUserLogoutV1_cciUserLogoutV1Echo1_pargs {
 public:


  virtual ~TCciUserLogoutV1_cciUserLogoutV1Echo1_pargs() throw() {}

  const TCciUserLogoutV1Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TCciUserLogoutV1_cciUserLogoutV1Echo1_result__isset {
  _TCciUserLogoutV1_cciUserLogoutV1Echo1_result__isset() : success(false) {}
  bool success;
} _TCciUserLogoutV1_cciUserLogoutV1Echo1_result__isset;

class TCciUserLogoutV1_cciUserLogoutV1Echo1_result {
 public:

  TCciUserLogoutV1_cciUserLogoutV1Echo1_result() {
  }

  virtual ~TCciUserLogoutV1_cciUserLogoutV1Echo1_result() throw() {}

  TCciUserLogoutV1Request success;

  _TCciUserLogoutV1_cciUserLogoutV1Echo1_result__isset __isset;

  void __set_success(const TCciUserLogoutV1Request& val) {
    success = val;
  }

  bool operator == (const TCciUserLogoutV1_cciUserLogoutV1Echo1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TCciUserLogoutV1_cciUserLogoutV1Echo1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCciUserLogoutV1_cciUserLogoutV1Echo1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TCciUserLogoutV1_cciUserLogoutV1Echo1_presult__isset {
  _TCciUserLogoutV1_cciUserLogoutV1Echo1_presult__isset() : success(false) {}
  bool success;
} _TCciUserLogoutV1_cciUserLogoutV1Echo1_presult__isset;

class TCciUserLogoutV1_cciUserLogoutV1Echo1_presult {
 public:


  virtual ~TCciUserLogoutV1_cciUserLogoutV1Echo1_presult() throw() {}

  TCciUserLogoutV1Request* success;

  _TCciUserLogoutV1_cciUserLogoutV1Echo1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TCciUserLogoutV1_cciUserLogoutV1Echo2_args__isset {
  _TCciUserLogoutV1_cciUserLogoutV1Echo2_args__isset() : response(false) {}
  bool response;
} _TCciUserLogoutV1_cciUserLogoutV1Echo2_args__isset;

class TCciUserLogoutV1_cciUserLogoutV1Echo2_args {
 public:

  TCciUserLogoutV1_cciUserLogoutV1Echo2_args() {
  }

  virtual ~TCciUserLogoutV1_cciUserLogoutV1Echo2_args() throw() {}

  TCciUserLogoutV1Response response;

  _TCciUserLogoutV1_cciUserLogoutV1Echo2_args__isset __isset;

  void __set_response(const TCciUserLogoutV1Response& val) {
    response = val;
  }

  bool operator == (const TCciUserLogoutV1_cciUserLogoutV1Echo2_args & rhs) const
  {
    if (!(response == rhs.response))
      return false;
    return true;
  }
  bool operator != (const TCciUserLogoutV1_cciUserLogoutV1Echo2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCciUserLogoutV1_cciUserLogoutV1Echo2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TCciUserLogoutV1_cciUserLogoutV1Echo2_pargs {
 public:


  virtual ~TCciUserLogoutV1_cciUserLogoutV1Echo2_pargs() throw() {}

  const TCciUserLogoutV1Response* response;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TCciUserLogoutV1_cciUserLogoutV1Echo2_result__isset {
  _TCciUserLogoutV1_cciUserLogoutV1Echo2_result__isset() : success(false) {}
  bool success;
} _TCciUserLogoutV1_cciUserLogoutV1Echo2_result__isset;

class TCciUserLogoutV1_cciUserLogoutV1Echo2_result {
 public:

  TCciUserLogoutV1_cciUserLogoutV1Echo2_result() {
  }

  virtual ~TCciUserLogoutV1_cciUserLogoutV1Echo2_result() throw() {}

  TCciUserLogoutV1Response success;

  _TCciUserLogoutV1_cciUserLogoutV1Echo2_result__isset __isset;

  void __set_success(const TCciUserLogoutV1Response& val) {
    success = val;
  }

  bool operator == (const TCciUserLogoutV1_cciUserLogoutV1Echo2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TCciUserLogoutV1_cciUserLogoutV1Echo2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCciUserLogoutV1_cciUserLogoutV1Echo2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TCciUserLogoutV1_cciUserLogoutV1Echo2_presult__isset {
  _TCciUserLogoutV1_cciUserLogoutV1Echo2_presult__isset() : success(false) {}
  bool success;
} _TCciUserLogoutV1_cciUserLogoutV1Echo2_presult__isset;

class TCciUserLogoutV1_cciUserLogoutV1Echo2_presult {
 public:


  virtual ~TCciUserLogoutV1_cciUserLogoutV1Echo2_presult() throw() {}

  TCciUserLogoutV1Response* success;

  _TCciUserLogoutV1_cciUserLogoutV1Echo2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TCciUserLogoutV1Client : virtual public TCciUserLogoutV1If {
 public:
  TCciUserLogoutV1Client(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TCciUserLogoutV1Client(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void cciUserLogoutV1(TCciUserLogoutV1Response& _return, const TCciUserLogoutV1Request& request);
  void send_cciUserLogoutV1(const TCciUserLogoutV1Request& request);
  void recv_cciUserLogoutV1(TCciUserLogoutV1Response& _return);
  void cciUserLogoutV1Echo1(TCciUserLogoutV1Request& _return, const TCciUserLogoutV1Request& request);
  void send_cciUserLogoutV1Echo1(const TCciUserLogoutV1Request& request);
  void recv_cciUserLogoutV1Echo1(TCciUserLogoutV1Request& _return);
  void cciUserLogoutV1Echo2(TCciUserLogoutV1Response& _return, const TCciUserLogoutV1Response& response);
  void send_cciUserLogoutV1Echo2(const TCciUserLogoutV1Response& response);
  void recv_cciUserLogoutV1Echo2(TCciUserLogoutV1Response& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TCciUserLogoutV1Processor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TCciUserLogoutV1If> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TCciUserLogoutV1Processor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_cciUserLogoutV1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cciUserLogoutV1Echo1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cciUserLogoutV1Echo2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TCciUserLogoutV1Processor(boost::shared_ptr<TCciUserLogoutV1If> iface) :
    iface_(iface) {
    processMap_["cciUserLogoutV1"] = &TCciUserLogoutV1Processor::process_cciUserLogoutV1;
    processMap_["cciUserLogoutV1Echo1"] = &TCciUserLogoutV1Processor::process_cciUserLogoutV1Echo1;
    processMap_["cciUserLogoutV1Echo2"] = &TCciUserLogoutV1Processor::process_cciUserLogoutV1Echo2;
  }

  virtual ~TCciUserLogoutV1Processor() {}
};

class TCciUserLogoutV1ProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TCciUserLogoutV1ProcessorFactory(const ::boost::shared_ptr< TCciUserLogoutV1IfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TCciUserLogoutV1IfFactory > handlerFactory_;
};

class TCciUserLogoutV1Multiface : virtual public TCciUserLogoutV1If {
 public:
  TCciUserLogoutV1Multiface(std::vector<boost::shared_ptr<TCciUserLogoutV1If> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TCciUserLogoutV1Multiface() {}
 protected:
  std::vector<boost::shared_ptr<TCciUserLogoutV1If> > ifaces_;
  TCciUserLogoutV1Multiface() {}
  void add(boost::shared_ptr<TCciUserLogoutV1If> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void cciUserLogoutV1(TCciUserLogoutV1Response& _return, const TCciUserLogoutV1Request& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cciUserLogoutV1(_return, request);
    }
    ifaces_[i]->cciUserLogoutV1(_return, request);
    return;
  }

  void cciUserLogoutV1Echo1(TCciUserLogoutV1Request& _return, const TCciUserLogoutV1Request& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cciUserLogoutV1Echo1(_return, request);
    }
    ifaces_[i]->cciUserLogoutV1Echo1(_return, request);
    return;
  }

  void cciUserLogoutV1Echo2(TCciUserLogoutV1Response& _return, const TCciUserLogoutV1Response& response) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cciUserLogoutV1Echo2(_return, response);
    }
    ifaces_[i]->cciUserLogoutV1Echo2(_return, response);
    return;
  }

};

} // namespace

#endif
