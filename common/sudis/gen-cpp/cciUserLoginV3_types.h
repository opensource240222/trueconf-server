/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef cciUserLoginV3_TYPES_H
#define cciUserLoginV3_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "commonResult_types.h"




typedef struct _TCciUserAttributeV3__isset {
  _TCciUserAttributeV3__isset() : values(false) {}
  bool values;
} _TCciUserAttributeV3__isset;

class TCciUserAttributeV3 {
 public:

  static const char* ascii_fingerprint; // = "09A67A266242E872217E8BB1F6E483B3";
  static const uint8_t binary_fingerprint[16]; // = {0x09,0xA6,0x7A,0x26,0x62,0x42,0xE8,0x72,0x21,0x7E,0x8B,0xB1,0xF6,0xE4,0x83,0xB3};

  TCciUserAttributeV3() : name() {
  }

  virtual ~TCciUserAttributeV3() throw() {}

  std::string name;
  std::vector<std::string>  values;

  _TCciUserAttributeV3__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_values(const std::vector<std::string> & val) {
    values = val;
    __isset.values = true;
  }

  bool operator == (const TCciUserAttributeV3 & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (__isset.values != rhs.__isset.values)
      return false;
    else if (__isset.values && !(values == rhs.values))
      return false;
    return true;
  }
  bool operator != (const TCciUserAttributeV3 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCciUserAttributeV3 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TCciUserAttributeV3 &a, TCciUserAttributeV3 &b);

typedef struct _UserLoginV3Request__isset {
  _UserLoginV3Request__isset() : spCode(false) {}
  bool spCode;
} _UserLoginV3Request__isset;

class UserLoginV3Request {
 public:

  static const char* ascii_fingerprint; // = "2C2B1E52F2C21E880657F61DE06A92A5";
  static const uint8_t binary_fingerprint[16]; // = {0x2C,0x2B,0x1E,0x52,0xF2,0xC2,0x1E,0x88,0x06,0x57,0xF6,0x1D,0xE0,0x6A,0x92,0xA5};

  UserLoginV3Request() : ticketId(), signedTicketBody(), spCode() {
  }

  virtual ~UserLoginV3Request() throw() {}

   ::MessageIdentifier messageIdentifier;
  std::string ticketId;
  std::string signedTicketBody;
  std::string spCode;

  _UserLoginV3Request__isset __isset;

  void __set_messageIdentifier(const  ::MessageIdentifier& val) {
    messageIdentifier = val;
  }

  void __set_ticketId(const std::string& val) {
    ticketId = val;
  }

  void __set_signedTicketBody(const std::string& val) {
    signedTicketBody = val;
  }

  void __set_spCode(const std::string& val) {
    spCode = val;
    __isset.spCode = true;
  }

  bool operator == (const UserLoginV3Request & rhs) const
  {
    if (!(messageIdentifier == rhs.messageIdentifier))
      return false;
    if (!(ticketId == rhs.ticketId))
      return false;
    if (!(signedTicketBody == rhs.signedTicketBody))
      return false;
    if (__isset.spCode != rhs.__isset.spCode)
      return false;
    else if (__isset.spCode && !(spCode == rhs.spCode))
      return false;
    return true;
  }
  bool operator != (const UserLoginV3Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserLoginV3Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UserLoginV3Request &a, UserLoginV3Request &b);


class UserLoginV3Response {
 public:

  static const char* ascii_fingerprint; // = "6506B68E78C2FF1104D42C94EB1C2AFC";
  static const uint8_t binary_fingerprint[16]; // = {0x65,0x06,0xB6,0x8E,0x78,0xC2,0xFF,0x11,0x04,0xD4,0x2C,0x94,0xEB,0x1C,0x2A,0xFC};

  UserLoginV3Response() : userTokenId() {
  }

  virtual ~UserLoginV3Response() throw() {}

   ::MessageIdentifier messageIdentifier;
   ::Result result;
  std::string userTokenId;
  std::vector<TCciUserAttributeV3>  attributes;

  void __set_messageIdentifier(const  ::MessageIdentifier& val) {
    messageIdentifier = val;
  }

  void __set_result(const  ::Result& val) {
    result = val;
  }

  void __set_userTokenId(const std::string& val) {
    userTokenId = val;
  }

  void __set_attributes(const std::vector<TCciUserAttributeV3> & val) {
    attributes = val;
  }

  bool operator == (const UserLoginV3Response & rhs) const
  {
    if (!(messageIdentifier == rhs.messageIdentifier))
      return false;
    if (!(result == rhs.result))
      return false;
    if (!(userTokenId == rhs.userTokenId))
      return false;
    if (!(attributes == rhs.attributes))
      return false;
    return true;
  }
  bool operator != (const UserLoginV3Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserLoginV3Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UserLoginV3Response &a, UserLoginV3Response &b);



#endif
