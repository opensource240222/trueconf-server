/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef cciUserRoleListV1_TYPES_H
#define cciUserRoleListV1_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "cciCommonV1_types.h"
#include "cciRoleCommonV1_types.h"


namespace sudis {

typedef struct _TCciUserRoleListV1Request__isset {
  _TCciUserRoleListV1Request__isset() : spCode(false) {}
  bool spCode;
} _TCciUserRoleListV1Request__isset;

class TCciUserRoleListV1Request {
 public:

  static const char* ascii_fingerprint; // = "2748901DF3E03B56075825ABF0FCFD25";
  static const uint8_t binary_fingerprint[16]; // = {0x27,0x48,0x90,0x1D,0xF3,0xE0,0x3B,0x56,0x07,0x58,0x25,0xAB,0xF0,0xFC,0xFD,0x25};

  TCciUserRoleListV1Request() : userTokenId(), requestDateTime(), requestNonce(), spCode() {
  }

  virtual ~TCciUserRoleListV1Request() throw() {}

  std::string userTokenId;
  std::string requestDateTime;
  std::string requestNonce;
  std::string spCode;

  _TCciUserRoleListV1Request__isset __isset;

  void __set_userTokenId(const std::string& val) {
    userTokenId = val;
  }

  void __set_requestDateTime(const std::string& val) {
    requestDateTime = val;
  }

  void __set_requestNonce(const std::string& val) {
    requestNonce = val;
  }

  void __set_spCode(const std::string& val) {
    spCode = val;
    __isset.spCode = true;
  }

  bool operator == (const TCciUserRoleListV1Request & rhs) const
  {
    if (!(userTokenId == rhs.userTokenId))
      return false;
    if (!(requestDateTime == rhs.requestDateTime))
      return false;
    if (!(requestNonce == rhs.requestNonce))
      return false;
    if (__isset.spCode != rhs.__isset.spCode)
      return false;
    else if (__isset.spCode && !(spCode == rhs.spCode))
      return false;
    return true;
  }
  bool operator != (const TCciUserRoleListV1Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCciUserRoleListV1Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TCciUserRoleListV1Request &a, TCciUserRoleListV1Request &b);

typedef struct _TCciUserRoleListV1Response__isset {
  _TCciUserRoleListV1Response__isset() : roleList(false) {}
  bool roleList;
} _TCciUserRoleListV1Response__isset;

class TCciUserRoleListV1Response {
 public:

  static const char* ascii_fingerprint; // = "932F2869C6C51F6F8871BF2C85008A08";
  static const uint8_t binary_fingerprint[16]; // = {0x93,0x2F,0x28,0x69,0xC6,0xC5,0x1F,0x6F,0x88,0x71,0xBF,0x2C,0x85,0x00,0x8A,0x08};

  TCciUserRoleListV1Response() : responseDateTime(), responseNonce() {
  }

  virtual ~TCciUserRoleListV1Response() throw() {}

  std::string responseDateTime;
  std::string responseNonce;
   ::sudis::TCciResultMessage resultMessage;
  std::vector< ::sudis::TCciRoleV1>  roleList;

  _TCciUserRoleListV1Response__isset __isset;

  void __set_responseDateTime(const std::string& val) {
    responseDateTime = val;
  }

  void __set_responseNonce(const std::string& val) {
    responseNonce = val;
  }

  void __set_resultMessage(const  ::sudis::TCciResultMessage& val) {
    resultMessage = val;
  }

  void __set_roleList(const std::vector< ::sudis::TCciRoleV1> & val) {
    roleList = val;
    __isset.roleList = true;
  }

  bool operator == (const TCciUserRoleListV1Response & rhs) const
  {
    if (!(responseDateTime == rhs.responseDateTime))
      return false;
    if (!(responseNonce == rhs.responseNonce))
      return false;
    if (!(resultMessage == rhs.resultMessage))
      return false;
    if (__isset.roleList != rhs.__isset.roleList)
      return false;
    else if (__isset.roleList && !(roleList == rhs.roleList))
      return false;
    return true;
  }
  bool operator != (const TCciUserRoleListV1Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCciUserRoleListV1Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TCciUserRoleListV1Response &a, TCciUserRoleListV1Response &b);

} // namespace

#endif
