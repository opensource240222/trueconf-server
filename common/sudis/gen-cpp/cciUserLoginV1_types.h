/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef cciUserLoginV1_TYPES_H
#define cciUserLoginV1_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "cciCommonV1_types.h"


namespace sudis {

typedef struct _TCciUserLoginV1Request__isset {
  _TCciUserLoginV1Request__isset() : spCode(false) {}
  bool spCode;
} _TCciUserLoginV1Request__isset;

class TCciUserLoginV1Request {
 public:

  static const char* ascii_fingerprint; // = "93A1111D3E071522253C5379C504D11B";
  static const uint8_t binary_fingerprint[16]; // = {0x93,0xA1,0x11,0x1D,0x3E,0x07,0x15,0x22,0x25,0x3C,0x53,0x79,0xC5,0x04,0xD1,0x1B};

  TCciUserLoginV1Request() : requestDateTime(), requestNonce(), login(), password(), spCode() {
  }

  virtual ~TCciUserLoginV1Request() throw() {}

  std::string requestDateTime;
  std::string requestNonce;
  std::string login;
  std::string password;
  std::string spCode;

  _TCciUserLoginV1Request__isset __isset;

  void __set_requestDateTime(const std::string& val) {
    requestDateTime = val;
  }

  void __set_requestNonce(const std::string& val) {
    requestNonce = val;
  }

  void __set_login(const std::string& val) {
    login = val;
  }

  void __set_password(const std::string& val) {
    password = val;
  }

  void __set_spCode(const std::string& val) {
    spCode = val;
    __isset.spCode = true;
  }

  bool operator == (const TCciUserLoginV1Request & rhs) const
  {
    if (!(requestDateTime == rhs.requestDateTime))
      return false;
    if (!(requestNonce == rhs.requestNonce))
      return false;
    if (!(login == rhs.login))
      return false;
    if (!(password == rhs.password))
      return false;
    if (__isset.spCode != rhs.__isset.spCode)
      return false;
    else if (__isset.spCode && !(spCode == rhs.spCode))
      return false;
    return true;
  }
  bool operator != (const TCciUserLoginV1Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCciUserLoginV1Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TCciUserLoginV1Request &a, TCciUserLoginV1Request &b);

typedef struct _TCciUserLoginV1Response__isset {
  _TCciUserLoginV1Response__isset() : userTokenId(false), attributes(false) {}
  bool userTokenId;
  bool attributes;
} _TCciUserLoginV1Response__isset;

class TCciUserLoginV1Response {
 public:

  static const char* ascii_fingerprint; // = "566EA6FBDAAA5A3C9631E9B70D390B7D";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x6E,0xA6,0xFB,0xDA,0xAA,0x5A,0x3C,0x96,0x31,0xE9,0xB7,0x0D,0x39,0x0B,0x7D};

  TCciUserLoginV1Response() : responseDateTime(), responseNonce(), userTokenId() {
  }

  virtual ~TCciUserLoginV1Response() throw() {}

  std::string responseDateTime;
  std::string responseNonce;
   ::sudis::TCciResultMessage resultMessage;
  std::string userTokenId;
  std::vector< ::sudis::TCciUserAttributeV1>  attributes;

  _TCciUserLoginV1Response__isset __isset;

  void __set_responseDateTime(const std::string& val) {
    responseDateTime = val;
  }

  void __set_responseNonce(const std::string& val) {
    responseNonce = val;
  }

  void __set_resultMessage(const  ::sudis::TCciResultMessage& val) {
    resultMessage = val;
  }

  void __set_userTokenId(const std::string& val) {
    userTokenId = val;
    __isset.userTokenId = true;
  }

  void __set_attributes(const std::vector< ::sudis::TCciUserAttributeV1> & val) {
    attributes = val;
    __isset.attributes = true;
  }

  bool operator == (const TCciUserLoginV1Response & rhs) const
  {
    if (!(responseDateTime == rhs.responseDateTime))
      return false;
    if (!(responseNonce == rhs.responseNonce))
      return false;
    if (!(resultMessage == rhs.resultMessage))
      return false;
    if (__isset.userTokenId != rhs.__isset.userTokenId)
      return false;
    else if (__isset.userTokenId && !(userTokenId == rhs.userTokenId))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    return true;
  }
  bool operator != (const TCciUserLoginV1Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCciUserLoginV1Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TCciUserLoginV1Response &a, TCciUserLoginV1Response &b);

} // namespace

#endif
