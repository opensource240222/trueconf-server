/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ticketV3_TYPES_H
#define ticketV3_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "commonResult_types.h"





class TicketV3Request {
 public:

  static const char* ascii_fingerprint; // = "A756D3DBE614FB13F70BF7F7B6EB3D73";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x56,0xD3,0xDB,0xE6,0x14,0xFB,0x13,0xF7,0x0B,0xF7,0xF7,0xB6,0xEB,0x3D,0x73};

  TicketV3Request() {
  }

  virtual ~TicketV3Request() throw() {}

   ::MessageIdentifier messageIdentifier;

  void __set_messageIdentifier(const  ::MessageIdentifier& val) {
    messageIdentifier = val;
  }

  bool operator == (const TicketV3Request & rhs) const
  {
    if (!(messageIdentifier == rhs.messageIdentifier))
      return false;
    return true;
  }
  bool operator != (const TicketV3Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TicketV3Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TicketV3Request &a, TicketV3Request &b);


class TicketV3Response {
 public:

  static const char* ascii_fingerprint; // = "B06764ADB7C15B97FD4C304ABD820216";
  static const uint8_t binary_fingerprint[16]; // = {0xB0,0x67,0x64,0xAD,0xB7,0xC1,0x5B,0x97,0xFD,0x4C,0x30,0x4A,0xBD,0x82,0x02,0x16};

  TicketV3Response() : ticketId(), ticketBody() {
  }

  virtual ~TicketV3Response() throw() {}

   ::MessageIdentifier messageIdentifier;
   ::Result result;
  std::string ticketId;
  std::string ticketBody;

  void __set_messageIdentifier(const  ::MessageIdentifier& val) {
    messageIdentifier = val;
  }

  void __set_result(const  ::Result& val) {
    result = val;
  }

  void __set_ticketId(const std::string& val) {
    ticketId = val;
  }

  void __set_ticketBody(const std::string& val) {
    ticketBody = val;
  }

  bool operator == (const TicketV3Response & rhs) const
  {
    if (!(messageIdentifier == rhs.messageIdentifier))
      return false;
    if (!(result == rhs.result))
      return false;
    if (!(ticketId == rhs.ticketId))
      return false;
    if (!(ticketBody == rhs.ticketBody))
      return false;
    return true;
  }
  bool operator != (const TicketV3Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TicketV3Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TicketV3Response &a, TicketV3Response &b);



#endif
