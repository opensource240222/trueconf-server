/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef cciUserListV2_TYPES_H
#define cciUserListV2_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "cciCommonV1_types.h"
#include "cciUserCommonV1_types.h"


namespace sudis {

typedef struct _TCciUserListV2Request__isset {
  _TCciUserListV2Request__isset() : login(false), fio(false) {}
  bool login;
  bool fio;
} _TCciUserListV2Request__isset;

class TCciUserListV2Request {
 public:

  static const char* ascii_fingerprint; // = "FED0FBEAA0C90D1589E8B650561B7675";
  static const uint8_t binary_fingerprint[16]; // = {0xFE,0xD0,0xFB,0xEA,0xA0,0xC9,0x0D,0x15,0x89,0xE8,0xB6,0x50,0x56,0x1B,0x76,0x75};

  TCciUserListV2Request() : requestDateTime(), requestNonce(), login(), fio() {
  }

  virtual ~TCciUserListV2Request() throw() {}

  std::string requestDateTime;
  std::string requestNonce;
  std::string login;
  std::string fio;

  _TCciUserListV2Request__isset __isset;

  void __set_requestDateTime(const std::string& val) {
    requestDateTime = val;
  }

  void __set_requestNonce(const std::string& val) {
    requestNonce = val;
  }

  void __set_login(const std::string& val) {
    login = val;
    __isset.login = true;
  }

  void __set_fio(const std::string& val) {
    fio = val;
    __isset.fio = true;
  }

  bool operator == (const TCciUserListV2Request & rhs) const
  {
    if (!(requestDateTime == rhs.requestDateTime))
      return false;
    if (!(requestNonce == rhs.requestNonce))
      return false;
    if (__isset.login != rhs.__isset.login)
      return false;
    else if (__isset.login && !(login == rhs.login))
      return false;
    if (__isset.fio != rhs.__isset.fio)
      return false;
    else if (__isset.fio && !(fio == rhs.fio))
      return false;
    return true;
  }
  bool operator != (const TCciUserListV2Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCciUserListV2Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TCciUserListV2Request &a, TCciUserListV2Request &b);

typedef struct _TCciUserListV2Response__isset {
  _TCciUserListV2Response__isset() : userList(false) {}
  bool userList;
} _TCciUserListV2Response__isset;

class TCciUserListV2Response {
 public:

  static const char* ascii_fingerprint; // = "4BEC7B9E1C1CDD96248174F9D2F41C35";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0xEC,0x7B,0x9E,0x1C,0x1C,0xDD,0x96,0x24,0x81,0x74,0xF9,0xD2,0xF4,0x1C,0x35};

  TCciUserListV2Response() : responseDateTime(), responseNonce() {
  }

  virtual ~TCciUserListV2Response() throw() {}

  std::string responseDateTime;
  std::string responseNonce;
   ::sudis::TCciResultMessage resultMessage;
  std::vector< ::sudis::TCciUserV1>  userList;

  _TCciUserListV2Response__isset __isset;

  void __set_responseDateTime(const std::string& val) {
    responseDateTime = val;
  }

  void __set_responseNonce(const std::string& val) {
    responseNonce = val;
  }

  void __set_resultMessage(const  ::sudis::TCciResultMessage& val) {
    resultMessage = val;
  }

  void __set_userList(const std::vector< ::sudis::TCciUserV1> & val) {
    userList = val;
    __isset.userList = true;
  }

  bool operator == (const TCciUserListV2Response & rhs) const
  {
    if (!(responseDateTime == rhs.responseDateTime))
      return false;
    if (!(responseNonce == rhs.responseNonce))
      return false;
    if (!(resultMessage == rhs.resultMessage))
      return false;
    if (__isset.userList != rhs.__isset.userList)
      return false;
    else if (__isset.userList && !(userList == rhs.userList))
      return false;
    return true;
  }
  bool operator != (const TCciUserListV2Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCciUserListV2Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TCciUserListV2Response &a, TCciUserListV2Response &b);

} // namespace

#endif
