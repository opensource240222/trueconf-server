#pragma once
//this is autogenerated header

#include "chatlib/storage/helpers.h"

#include <string>
#include <vector>
namespace chat
{
namespace sqlite_qry
{
using ScriptDescr = chat::detail::ScriptDescr;
using ExecType = chat::detail::ExecType;
const std::vector<ScriptDescr> initScript = {{
      R"sql(create table if not exists ban_list (
)sql" R"sql(  context_id bigint       not null references global_contexts (id),
)sql" R"sql(  name       varchar(256) not null check (length(name) <= 256 and name != ''),
)sql" R"sql(  type       smallint     not null check (type in (1, 2))
)sql" R"sql();
)sql"}, {
      R"sql(create unique index if not exists ban_list_context_id_lower_name_idx on ban_list (context_id, lower(name));
)sql"}, {
      R"sql(create table if not exists chats (
)sql" R"sql(  id         varchar(40)  not null check (length(id) = 40) primary key,
)sql" R"sql(  type       smallint     not null check (type in (1, 2, 3)),
)sql" R"sql(  version    varchar(8)   not null check (length(version) <= 8),
)sql" R"sql(  creator    varchar(256) not null check (length(creator) <= 256),
)sql" R"sql(  created_at timestamptz  not null default ((julianday('now') - 2440587.5)*86400.0)
)sql" R"sql() without rowid;
)sql"}, {
      R"sql(create table if not exists first_visible_messages (
)sql" R"sql(  chat_id          varchar(40)  not null check (length(chat_id) = 40),
)sql" R"sql(  message_id       uuid         not null check (length(message_id) = 36) references messages (id),
)sql" R"sql(  participant_name varchar(256) not null check (length(participant_name) <= 256 and participant_name != ''),
)sql" R"sql(  participant_type smallint     not null check (participant_type in (1, 2))
)sql" R"sql();
)sql"}, {
      R"sql(create unique index if not exists first_visible_messages_chat_id_lower_participant_name_idx on first_visible_messages (chat_id, lower(participant_name));
)sql"}, {
      R"sql(create table if not exists global_contexts (
)sql" R"sql(  id          integer     not null primary key autoincrement,
)sql" R"sql(  chat_id     varchar(40) not null check (length(chat_id) = 40),
)sql" R"sql(  message_id  uuid        not null check (length(message_id) = 36),
)sql" R"sql(  created_at  timestamptz not null                            default ((julianday('now') - 2440587.5)*86400.0),
)sql" R"sql(  modified_at timestamptz not null                            default ((julianday('now') - 2440587.5)*86400.0),
)sql" R"sql(  is_valid    bool        not null check (is_valid in (0, 1)) default 1,
)sql" R"sql(  chat_title  varchar(1024) check (length(chat_title) <= 1024)
)sql" R"sql();
)sql"}, {
      R"sql(create index if not exists global_contexts_chat_id_idx on global_contexts (chat_id);
)sql"}, {
      R"sql(create index if not exists global_contexts_message_id_idx on global_contexts (message_id);
)sql"}, {
      R"sql(create table if not exists messages (
)sql" R"sql(  id                  uuid         not null check (length(id) = 36) primary key,
)sql" R"sql(  chat_id             varchar(40)  not null check (length(chat_id) = 40),
)sql" R"sql(  int_order           bigint       not null,
)sql" R"sql(  text_order          text         not null                             default '',
)sql" R"sql(  bucket_number       bigint       not null,
)sql" R"sql(  client_timestamp    timestamptz  not null,
)sql" R"sql(  db_timestamp        timestamptz  not null                             default ((julianday('now') - 2440587.5)*86400.0),
)sql" R"sql(  is_active           bool         not null check (is_active in (0, 1)) default 1,
)sql" R"sql(  is_valid            bool         not null check (is_valid in (0, 1))  default 1,
)sql" R"sql(  type                smallint     not null,
)sql" R"sql(  sender              varchar(256) not null check (length(sender) <= 256 and sender != ''),
)sql" R"sql(  sender_type         smallint     not null check (sender_type in (1, 2)),
)sql" R"sql(  parent_message_id   uuid check (length(parent_message_id) = 36),
)sql" R"sql(  original_message_id uuid check (length(original_message_id) = 36),
)sql" R"sql(  content             jsonb,
)sql" R"sql(  container           blob
)sql" R"sql() without rowid;
)sql"}, {
      R"sql(create unique index if not exists messages_chat_id_int_order_text_order_idx on messages (chat_id, int_order, text_order);
)sql"}, {
      R"sql(create index if not exists messages_chat_id_type_idx on messages (chat_id, type);
)sql"}, {
      R"sql(create index if not exists messages_client_timestamp_idx on messages (client_timestamp);
)sql"}, {
      R"sql(create index if not exists messages_lower_sender_idx on messages (lower(sender));
)sql"}, {
      R"sql(create index if not exists messages_parent_id_idx on messages (parent_message_id);
)sql"}, {
      R"sql(create index if not exists messages_original_id_idx on messages (original_message_id);
)sql"}, {
      R"sql(create table if not exists participants (
)sql" R"sql(  context_id bigint       not null references global_contexts (id),
)sql" R"sql(  name       varchar(256) not null check (length(name) <= 256 and name != ''),
)sql" R"sql(  type       smallint     not null check (type in (1, 2))
)sql" R"sql();
)sql"}, {
      R"sql(create unique index if not exists participants_context_id_lower_name_idx on participants (context_id, lower(name));
)sql"}, {
      R"sql(create table if not exists personal_contexts (
)sql" R"sql(  id                integer      not null primary key autoincrement,
)sql" R"sql(  chat_id           varchar(40)  not null check (length(chat_id) = 40),
)sql" R"sql(  owner             varchar(256) not null check (length(owner) <= 256 and owner != ''),
)sql" R"sql(  message_id        uuid         not null check (length(message_id) = 36),
)sql" R"sql(  created_at        timestamptz  not null                                     default ((julianday('now') - 2440587.5)*86400.0),
)sql" R"sql(  modified_at       timestamptz  not null                                     default ((julianday('now') - 2440587.5)*86400.0),
)sql" R"sql(  is_valid          bool         not null check (is_valid in (0, 1))          default 1,
)sql" R"sql(  is_deleted        bool         not null check (is_deleted in (0, 1))        default 0,
)sql" R"sql(  get_notifications bool         not null check (get_notifications in (0, 1)) default 1,
)sql" R"sql(  chat_title        varchar(1024) check (length(chat_title) <= 1024),
)sql" R"sql(  draft             jsonb
)sql" R"sql();
)sql"}, {
      R"sql(create index if not exists personal_contexts_chat_id_idx on personal_contexts (chat_id);
)sql"}, {
      R"sql(create index if not exists personal_contexts_owner_idx on personal_contexts (owner);
)sql"}, {
      R"sql(create index if not exists personal_contexts_message_id_idx on personal_contexts (message_id);
)sql"}, {
      R"sql(create table if not exists undelivered_messages (
)sql" R"sql(  message_id       uuid         not null check (length(message_id) = 36) references messages (id),
)sql" R"sql(  participant_name varchar(256) not null check (length(participant_name) <= 256 and participant_name != ''),
)sql" R"sql(  participant_type smallint     not null check (participant_type in (1, 2))
)sql" R"sql();
)sql"}, {
      R"sql(create unique index if not exists undelivered_messages_message_id_lower_participant_name_idx on undelivered_messages (message_id, lower(participant_name));
)sql"}, {
      R"sql(create table if not exists unread_messages (
)sql" R"sql(  context_id bigint not null references personal_contexts (id),
)sql" R"sql(  message_id uuid   not null check (length(message_id) = 36) references messages (id),
)sql" R"sql(  primary key (context_id, message_id)
)sql" R"sql() without rowid;
)sql"}, {
      R"sql(create table if not exists _add_first_visible_message_args (
)sql" R"sql(  _message_id uuid primary key not null,
)sql" R"sql(  _user       varchar          not null
)sql" R"sql() without rowid;
)sql"}, {
      R"sql(create table if not exists _add_first_visible_message_res (
)sql" R"sql(  error int primary key not null default 0
)sql" R"sql() without rowid;
)sql"}, {
      R"sql(create table if not exists _add_global_context_args (
)sql" R"sql(  _chat_id            varchar          not null,
)sql" R"sql(  _chat_type          int              not null,
)sql" R"sql(  _chat_version       varchar          not null,
)sql" R"sql(  _chat_creator       varchar          not null,
)sql" R"sql(  _chat_created_at    bigint           not null,
)sql" R"sql(  _context_created_at bigint           not null,
)sql" R"sql(  _message_id         uuid primary key not null,
)sql" R"sql(  _chat_title         varchar,
)sql" R"sql(  _participants       jsonb,
)sql" R"sql(  _ban_list           jsonb
)sql" R"sql() without rowid;
)sql"}, {
      R"sql(create table if not exists _add_global_context_tmp (
)sql" R"sql(  context_id int primary key not null
)sql" R"sql() without rowid;
)sql"}, {
      R"sql(create table if not exists _add_message_args (
)sql" R"sql(  _message_id          uuid primary key not null,
)sql" R"sql(  _chat_id             varchar          not null,
)sql" R"sql(  _time_stamp          bigint           not null,
)sql" R"sql(  _bucket_number       bigint           not null,
)sql" R"sql(  _type                int              not null,
)sql" R"sql(  _sender              varchar          not null,
)sql" R"sql(  _sender_type         int              not null,
)sql" R"sql(  _parent_message_id   uuid,
)sql" R"sql(  _original_message_id uuid,
)sql" R"sql(  _content             jsonb,
)sql" R"sql(  _container           blob
)sql" R"sql() without rowid;
)sql"}, {
      R"sql(create table if not exists _add_message_res (
)sql" R"sql(  error       int primary key not null default 0,
)sql" R"sql(  int_order   bigint,
)sql" R"sql(  text_order  text,
)sql" R"sql(  _int_order  bigint,
)sql" R"sql(  _text_order text,
)sql" R"sql(  _tmp        text,
)sql" R"sql(  _diff       int
)sql" R"sql() without rowid;
)sql"}, {
      R"sql(create table if not exists _add_personal_context_args (
)sql" R"sql(  _owner              varchar          not null,
)sql" R"sql(  _chat_id            varchar          not null,
)sql" R"sql(  _chat_type          int              not null,
)sql" R"sql(  _chat_version       varchar          not null,
)sql" R"sql(  _chat_creator       varchar          not null,
)sql" R"sql(  _chat_created_at    bigint           not null,
)sql" R"sql(  _context_created_at bigint           not null,
)sql" R"sql(  _message_id         uuid primary key not null,
)sql" R"sql(  _is_deleted         bool             not null,
)sql" R"sql(  _get_notifications  bool             not null,
)sql" R"sql(  _chat_title         varchar,
)sql" R"sql(  _unread_messages    jsonb,
)sql" R"sql(  _draft              jsonb
)sql" R"sql() without rowid;
)sql"}, {
      R"sql(create table if not exists _add_undelivered_message_args (
)sql" R"sql(  _message_id uuid primary key not null
)sql" R"sql() without rowid;
)sql"}, {
      R"sql(create table if not exists _create_global_context_args (
)sql" R"sql(  _message_id uuid primary key not null,
)sql" R"sql(  _chat_id    varchar          not null,
)sql" R"sql(  _type       int              not null,
)sql" R"sql(  _sender     varchar          not null,
)sql" R"sql(  _content    jsonb            not null
)sql" R"sql() without rowid;
)sql"}, {
      R"sql(create table if not exists _create_global_context_tmp (
)sql" R"sql(  old_context_id int primary key not null,
)sql" R"sql(  chat_title     varchar
)sql" R"sql() without rowid;
)sql"}, {
      R"sql(create table if not exists _get_messages_for_global_context_res (
)sql" R"sql(  message_id uuid primary key not null
)sql" R"sql() without rowid;
)sql"}, {
      R"sql(create table if not exists _get_messages_for_global_context_tmp (
)sql" R"sql(  chat_id    varchar primary key not null,
)sql" R"sql(  int_order  bigint              not null,
)sql" R"sql(  text_order text                not null
)sql" R"sql() without rowid;
)sql"}, {
      R"sql(create table if not exists _get_messages_for_personal_context_res (
)sql" R"sql(  message_id uuid primary key not null
)sql" R"sql() without rowid;
)sql"}, {
      R"sql(create table if not exists _get_messages_for_personal_context_tmp (
)sql" R"sql(  chat_id    varchar primary key not null,
)sql" R"sql(  int_order  bigint              not null,
)sql" R"sql(  text_order text                not null
)sql" R"sql() without rowid;
)sql"}, {
      R"sql(create table if not exists _update_message_chain_args (
)sql" R"sql(  _message_id uuid primary key not null
)sql" R"sql() without rowid;
)sql"}, {
      R"sql(create table if not exists _update_message_chain_tmp (
)sql" R"sql(  message_id        uuid primary key not null,
)sql" R"sql(  int_order         bigint           not null,
)sql" R"sql(  text_order        text             not null,
)sql" R"sql(  chat_id           varchar          not null,
)sql" R"sql(  client_timestamp  timestamptz      not null,
)sql" R"sql(  parent_message_id uuid             not null
)sql" R"sql() without rowid;
)sql"}, {
      R"sql(create table if not exists _update_message_chain_vars (
)sql" R"sql(  int_order   bigint primary key not null,
)sql" R"sql(  text_order  text               not null,
)sql" R"sql(  _int_order  bigint             not null,
)sql" R"sql(  _text_order text               not null,
)sql" R"sql(  _tmp        text,
)sql" R"sql(  _diff       int
)sql" R"sql() without rowid;
)sql"}, {
      R"sql(create trigger if not exists _update_message_chain_trg
)sql" R"sql(  after insert
)sql" R"sql(  on _update_message_chain_tmp
)sql" R"sql(begin
)sql" R"sql(  delete from _update_message_chain_vars;
)sql" R"sql(  insert into _update_message_chain_vars (_int_order, _text_order, int_order, text_order)
)sql" R"sql(  values (0, '', 0, '');
)sql" R"sql(  update _update_message_chain_vars
)sql" R"sql(  set (_int_order, _text_order, int_order, text_order) = (with tab as (select
)sql" R"sql(                                                                         int_order,
)sql" R"sql(                                                                         text_order
)sql" R"sql(                                                                       from messages
)sql" R"sql(                                                                       where chat_id = new.chat_id
)sql" R"sql(                                                                             and ((int_order, text_order) > (select int_order, text_order from messages where id = new.parent_message_id)) is not false
)sql" R"sql(                                                                             and (client_timestamp, id) > (new.client_timestamp, new.message_id)
)sql" R"sql(                                                                       order by int_order, text_order
)sql" R"sql(                                                                       limit 1),
)sql" R"sql(                                                              case1 as (select
)sql" R"sql(                                                                          1                                                                      as priority,
)sql" R"sql(                                                                          lag(int_order, 1, int_order - 2) over (order by int_order, text_order) as int_order,
)sql" R"sql(                                                                          lag(text_order, 1, '') over (order by int_order, text_order)           as text_order,
)sql" R"sql(                                                                          int_order                                                              as next_int,
)sql" R"sql(                                                                          text_order                                                             as next_text
)sql" R"sql(                                                                        from messages
)sql" R"sql(                                                                        where chat_id = new.chat_id
)sql" R"sql(                                                                              and (int_order, text_order) <= (select int_order, text_order from tab)
)sql" R"sql(                                                                        order by int_order desc, text_order desc
)sql" R"sql(                                                                        limit 1),
)sql" R"sql(                                                              case2 as (select
)sql" R"sql(                                                                          2                                                                       as priority,
)sql" R"sql(                                                                          int_order,
)sql" R"sql(                                                                          text_order,
)sql" R"sql(                                                                          lead(int_order, 1, int_order + 2) over (order by int_order, text_order) as next_int,
)sql" R"sql(                                                                          lead(text_order, 1, '') over (order by int_order, text_order)           as next_text
)sql" R"sql(                                                                        from messages
)sql" R"sql(                                                                        where chat_id = new.chat_id
)sql" R"sql(                                                                        order by int_order desc, text_order desc
)sql" R"sql(                                                                        limit 1)
)sql" R"sql(                                                          select
)sql" R"sql(                                                            t.int_order,
)sql" R"sql(                                                            t.text_order,
)sql" R"sql(                                                            t.next_int,
)sql" R"sql(                                                            t.next_text
)sql" R"sql(                                                          from (select *
)sql" R"sql(                                                                from case1
)sql" R"sql(                                                                union all
)sql" R"sql(                                                                select *
)sql" R"sql(                                                                from case2
)sql" R"sql(                                                                order by priority) t
)sql" R"sql(                                                          limit 1);
)sql" R"sql(  update _update_message_chain_vars
)sql" R"sql(  set _diff = (int_order - _int_order) / 2;
)sql" R"sql(  update _update_message_chain_vars
)sql" R"sql(  set int_order = _int_order + (int_order - _int_order) / 2,
)sql" R"sql(    text_order  = ''
)sql" R"sql(  where _diff > 0;
)sql" R"sql(  update _update_message_chain_vars
)sql" R"sql(  set _tmp = (with recursive dec_to64 as (select
)sql" R"sql(                                            0                                                            as cnt,
)sql" R"sql(                                            case when t4.dd2_dec < 0 then t4.dd1_inc else t4.dd2_dec end as val,
)sql" R"sql(                                            0                                                            as residual,
)sql" R"sql(                                            ''                                                           as digit,
)sql" R"sql(                                            t4.pos                                                       as pos1,
)sql" R"sql(                                            t4.dd2_dec                                                   as dd2_dec
)sql" R"sql(                                          from (with recursive r as (select *
)sql" R"sql(                                                                     from (select
)sql" R"sql(                                                                             (select '0' || _text_order from _update_message_chain_vars) as raw,
)sql" R"sql(                                                                             (select '0' || _text_order from _update_message_chain_vars) as d,
)sql" R"sql(                                                                             0                                                 as pos,
)sql" R"sql(                                                                             0                                                 as val
)sql" R"sql(                                                                           union all
)sql" R"sql(                                                                           select
)sql" R"sql(                                                                             (select (int_order - _int_order) || text_order from _update_message_chain_vars) as raw,
)sql" R"sql(                                                                             (select (int_order - _int_order) || text_order from _update_message_chain_vars) as d,
)sql" R"sql(                                                                             0                                                                     as pos,
)sql" R"sql(                                                                             0                                                                     as val) t1
)sql" R"sql(                                                                     union
)sql" R"sql(                                                                     select
)sql" R"sql(                                                                       raw,
)sql" R"sql(                                                                       substr(raw, pos + 1, 1),
)sql" R"sql(                                                                       pos + 1,
)sql" R"sql(                                                                       (instr('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz{}', substr(raw, pos + 1, 1)) - 1)
)sql" R"sql(                                                                     from r
)sql" R"sql(                                                                     where length(raw) > r.pos)
)sql" R"sql(                                          select
)sql" R"sql(                                            *,
)sql" R"sql(                                            dd1 + half_diff as dd1_inc,
)sql" R"sql(                                            dd2 - half_diff as dd2_dec
)sql" R"sql(                                          from (select
)sql" R"sql(                                                  *,
)sql" R"sql(                                                  case when dd2 - dd1 = 0 then 0 when dd2 - dd1 > 0 then (dd2 - dd1) / 2 else (64 * 64 + dd2 - dd1) / 2 end as half_diff
)sql" R"sql(                                                from (select
)sql" R"sql(                                                        *,
)sql" R"sql(                                                        64 * d1 + lead(d1, 1, 0) over (order by pos) as dd1,
)sql" R"sql(                                                        64 * d2 + lead(d2, 1, 0) over (order by pos) as dd2
)sql" R"sql(                                                      from (select
)sql" R"sql(                                                              r1.pos,
)sql" R"sql(                                                              coalesce(r1.val, 0) as d1,
)sql" R"sql(                                                              coalesce(r2.val, 0) as d2
)sql" R"sql(                                                            from (select * from r where raw = (select '0' || _text_order from _update_message_chain_vars) and pos > 0) r1
)sql" R"sql(                                                              left join (select * from r where raw = (select (int_order - _int_order) || text_order from _update_message_chain_vars) and pos > 0) r2
)sql" R"sql(                                                                on r1.pos = r2.pos
)sql" R"sql(                                                            union all
)sql" R"sql(                                                            select
)sql" R"sql(                                                              r1.pos,
)sql" R"sql(                                                              coalesce(r2.val, 0) as d1,
)sql" R"sql(                                                              coalesce(r1.val, 0) as d2
)sql" R"sql(                                                            from (select * from r where raw = (select (int_order - _int_order) || text_order from _update_message_chain_vars) and pos > 0) r1
)sql" R"sql(                                                              left join (select * from r where raw = (select '0' || _text_order from _update_message_chain_vars) and pos > 0) r2
)sql" R"sql(                                                                on r1.pos = r2.pos
)sql" R"sql(                                                            where r2.pos is null) t1) t2) t3
)sql" R"sql(                                          where half_diff > 0
)sql" R"sql(                                          order by pos asc
)sql" R"sql(                                          limit 1) t4
)sql" R"sql(                                          union
)sql" R"sql(                                          select
)sql" R"sql(                                            cnt + 1                                                                                                  as cnt,
)sql" R"sql(                                            val / 64                                                                                                 as val,
)sql" R"sql(                                            val - (val / 64 * 64)                                                                                    as residual,
)sql" R"sql(                                            substr('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz{}', val - (val / 64 * 64) + 1, 1) as digit,
)sql" R"sql(                                            pos1,
)sql" R"sql(                                            dd2_dec
)sql" R"sql(                                          from dec_to64
)sql" R"sql(                                          where val > 0)
)sql" R"sql(              select result
)sql" R"sql(              from (select
)sql" R"sql(                      substr(case when dd2_dec < 0 then (select '0' || _text_order from _update_message_chain_vars) else (select (int_order - _int_order) || text_order from _update_message_chain_vars) end || '000000000', 1, pos1 - 1) || substr('00000000' || group_concat(digit, ''), -2, 2) as result,
)sql" R"sql(                      1                                                                                                                                                                                                                                                       as priority
)sql" R"sql(                    from (select *
)sql" R"sql(                          from dec_to64
)sql" R"sql(                          where val > 0 or residual > 0
)sql" R"sql(                          order by cnt desc) t
)sql" R"sql(                    union all
)sql" R"sql(                    select
)sql" R"sql(                      substr((select (int_order - _int_order) || text_order from _update_message_chain_vars) || '000000000', 1, pos1 - 1),
)sql" R"sql(                      2
)sql" R"sql(                    from dec_to64
)sql" R"sql(                    where cnt = 0
)sql" R"sql(                          and val = 0) res
)sql" R"sql(              where result is not null
)sql" R"sql(              order by priority asc
)sql" R"sql(              limit 1)
)sql" R"sql(  where _diff <= 0;
)sql" R"sql(  update _update_message_chain_vars
)sql" R"sql(  set int_order = _int_order + cast(substr(_tmp, 1, 1) as int),
)sql" R"sql(    text_order  = substr(_tmp, 2)
)sql" R"sql(  where _diff <= 0;
)sql" R"sql(  update messages
)sql" R"sql(  set (int_order, text_order) = (select int_order, text_order from _update_message_chain_vars)
)sql" R"sql(  where id = new.message_id;
)sql" R"sql(  delete from _update_message_chain_vars;
)sql" R"sql(end;
)sql"}
};
const std::vector<ScriptDescr> addFirstVisibleMessage = {{
      R"sql(pragma foreign_keys = on;
)sql"}, {
      R"sql(delete from _add_first_visible_message_args;
)sql"}, {
      R"sql(delete from _add_first_visible_message_res;
)sql"}, {
      R"sql(insert into _add_first_visible_message_args
)sql" R"sql(values (?, ?);
)sql", ExecType::execute, true}, {
      R"sql(insert into _add_first_visible_message_res
)sql" R"sql(  select case when not exists(select 1
)sql" R"sql(                              from messages
)sql" R"sql(                              where id = (select _message_id from _add_first_visible_message_args))
)sql" R"sql(           then -1
)sql" R"sql(         when not exists(select 1
)sql" R"sql(                         from messages
)sql" R"sql(                         where id = (select _message_id from _add_first_visible_message_args)
)sql" R"sql(                               and type in (110, 223, 224))
)sql" R"sql(           then 1
)sql" R"sql(         else 0 end;
)sql"}, {
      R"sql(with message as (select *
)sql" R"sql(                 from messages
)sql" R"sql(                 where id = (select _message_id from _add_first_visible_message_args))
)sql" R"sql(insert into first_visible_messages (chat_id, message_id, participant_name, participant_type)
)sql" R"sql(  select
)sql" R"sql(    m.chat_id,
)sql" R"sql(    _message_id,
)sql" R"sql(    _user,
)sql" R"sql(    1
)sql" R"sql(  from _add_first_visible_message_args
)sql" R"sql(    join _add_first_visible_message_res
)sql" R"sql(      on true
)sql" R"sql(    join message m
)sql" R"sql(      on true
)sql" R"sql(  where error = 0
)sql" R"sql(        and ((m.type = 110 and lower(json_extract(m.content, '$.name')) = lower(_user))
)sql" R"sql(             or (m.type = 223 and lower(m.sender) = lower(_user))
)sql" R"sql(             or m.type = 224)
)sql" R"sql(on conflict (chat_id, lower(participant_name))
)sql" R"sql(  do update
)sql" R"sql(    set message_id = excluded.message_id;
)sql"}, {
      R"sql(select error
)sql" R"sql(from _add_first_visible_message_res;
)sql", ExecType::query}, {
      R"sql(delete from _add_first_visible_message_args;
)sql"}, {
      R"sql(delete from _add_first_visible_message_res;
)sql"}
};
const std::vector<ScriptDescr> addGlobalContext = {{
      R"sql(begin immediate;
)sql"}, {
      R"sql(pragma foreign_keys = on;
)sql"}, {
      R"sql(delete from _add_global_context_args;
)sql"}, {
      R"sql(delete from _add_global_context_tmp;
)sql"}, {
      R"sql(insert into _add_global_context_args
)sql" R"sql(values (?, ?, ?, ?, ? / 1000.0, ? / 1000.0, ?, ?, ?, ?);
)sql", ExecType::execute, true}, {
      R"sql(insert or ignore into chats (id, type, version, creator, created_at)
)sql" R"sql(  select
)sql" R"sql(    _chat_id,
)sql" R"sql(    _chat_type,
)sql" R"sql(    _chat_version,
)sql" R"sql(    _chat_creator,
)sql" R"sql(    _chat_created_at
)sql" R"sql(  from _add_global_context_args;
)sql"}, {
      R"sql(insert into global_contexts (chat_id, message_id, created_at, modified_at, chat_title)
)sql" R"sql(  select
)sql" R"sql(    _chat_id,
)sql" R"sql(    _message_id,
)sql" R"sql(    _context_created_at,
)sql" R"sql(    _context_created_at,
)sql" R"sql(    _chat_title
)sql" R"sql(  from _add_global_context_args;
)sql"}, {
      R"sql(insert into _add_global_context_tmp
)sql" R"sql(  select last_insert_rowid();
)sql"}, {
      R"sql(insert into participants (context_id, name, type)
)sql" R"sql(  select
)sql" R"sql(    _add_global_context_tmp.context_id,
)sql" R"sql(    json_extract(json_each.value, '$.name'),
)sql" R"sql(    json_extract(json_each.value, '$.type')
)sql" R"sql(  from _add_global_context_tmp, json_each((select _participants from _add_global_context_args));
)sql"}, {
      R"sql(insert into ban_list (context_id, name, type)
)sql" R"sql(  select
)sql" R"sql(    _add_global_context_tmp.context_id,
)sql" R"sql(    json_extract(json_each.value, '$.name'),
)sql" R"sql(    json_extract(json_each.value, '$.type')
)sql" R"sql(  from _add_global_context_tmp, json_each((select _ban_list from _add_global_context_args));
)sql"}, {
      R"sql(delete from _add_global_context_args;
)sql"}, {
      R"sql(delete from _add_global_context_tmp;
)sql"}, {
      R"sql(commit;
)sql"}
};
const std::vector<ScriptDescr> addMessage = {{
      R"sql(delete from _add_message_args;
)sql"}, {
      R"sql(delete from _add_message_res;
)sql"}, {
      R"sql(insert into _add_message_args
)sql" R"sql(values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
)sql", ExecType::execute, true}, {
      R"sql(insert into _add_message_res (int_order, text_order)
)sql" R"sql(values (0, '');
)sql"}, {
      R"sql(update _add_message_res
)sql" R"sql(set (_int_order, _text_order, int_order, text_order) = (with tab as (select
)sql" R"sql(                                                                       int_order,
)sql" R"sql(                                                                       text_order
)sql" R"sql(                                                                     from messages
)sql" R"sql(                                                                     where chat_id = (select _chat_id from _add_message_args)
)sql" R"sql(                                                                           and ((int_order, text_order) > (select int_order, text_order from messages where id = (select _parent_message_id from _add_message_args))) is not false
)sql" R"sql(                                                                           and (client_timestamp, id) > (select _time_stamp, _message_id from _add_message_args)
)sql" R"sql(                                                                     order by int_order, text_order
)sql" R"sql(                                                                     limit 1),
)sql" R"sql(                                                                  case1 as (select
)sql" R"sql(                                                                              1                                                                      as priority,
)sql" R"sql(                                                                              lag(int_order, 1, int_order - 2) over (order by int_order, text_order) as int_order,
)sql" R"sql(                                                                              lag(text_order, 1, '') over (order by int_order, text_order)           as text_order,
)sql" R"sql(                                                                              int_order                                                              as next_int,
)sql" R"sql(                                                                              text_order                                                             as next_text
)sql" R"sql(                                                                            from messages
)sql" R"sql(                                                                            where chat_id = (select _chat_id from _add_message_args)
)sql" R"sql(                                                                                  and (int_order, text_order) <= (select int_order, text_order from tab)
)sql" R"sql(                                                                            order by int_order desc, text_order desc
)sql" R"sql(                                                                            limit 1),
)sql" R"sql(                                                                  case2 as (select
)sql" R"sql(                                                                              2                                                                       as priority,
)sql" R"sql(                                                                              int_order,
)sql" R"sql(                                                                              text_order,
)sql" R"sql(                                                                              lead(int_order, 1, int_order + 2) over (order by int_order, text_order) as next_int,
)sql" R"sql(                                                                              lead(text_order, 1, '') over (order by int_order, text_order)           as next_text
)sql" R"sql(                                                                            from messages
)sql" R"sql(                                                                            where chat_id = (select _chat_id from _add_message_args)
)sql" R"sql(                                                                            order by int_order desc, text_order desc
)sql" R"sql(                                                                            limit 1)
)sql" R"sql(                                                        select
)sql" R"sql(                                                          t.int_order,
)sql" R"sql(                                                          t.text_order,
)sql" R"sql(                                                          t.next_int,
)sql" R"sql(                                                          t.next_text
)sql" R"sql(                                                        from (select *
)sql" R"sql(                                                              from case1
)sql" R"sql(                                                              union all
)sql" R"sql(                                                              select *
)sql" R"sql(                                                              from case2
)sql" R"sql(                                                              order by priority) t
)sql" R"sql(                                                        limit 1)
)sql" R"sql(where exists(select 1
)sql" R"sql(             from messages
)sql" R"sql(             where chat_id = (select _chat_id from _add_message_args));
)sql"}, {
      R"sql(update _add_message_res
)sql" R"sql(set _diff = (int_order - _int_order) / 2;
)sql"}, {
      R"sql(update _add_message_res
)sql" R"sql(set int_order = _int_order + (int_order - _int_order) / 2,
)sql" R"sql(  text_order  = ''
)sql" R"sql(where _diff > 0;
)sql"}, {
      R"sql(update _add_message_res
)sql" R"sql(set _tmp = (with recursive dec_to64 as (select
)sql" R"sql(                                          0                                                            as cnt,
)sql" R"sql(                                          case when t4.dd2_dec < 0 then t4.dd1_inc else t4.dd2_dec end as val,
)sql" R"sql(                                          0                                                            as residual,
)sql" R"sql(                                          ''                                                           as digit,
)sql" R"sql(                                          t4.pos                                                       as pos1,
)sql" R"sql(                                          t4.dd2_dec                                                   as dd2_dec
)sql" R"sql(                                        from (with recursive r as (select *
)sql" R"sql(                                                                   from (select
)sql" R"sql(                                                                           (select '0' || _text_order from _add_message_res) as raw,
)sql" R"sql(                                                                           (select '0' || _text_order from _add_message_res) as d,
)sql" R"sql(                                                                           0                                                 as pos,
)sql" R"sql(                                                                           0                                                 as val
)sql" R"sql(                                                                         union all
)sql" R"sql(                                                                         select
)sql" R"sql(                                                                           (select (int_order - _int_order) || text_order from _add_message_res) as raw,
)sql" R"sql(                                                                           (select (int_order - _int_order) || text_order from _add_message_res) as d,
)sql" R"sql(                                                                           0                                                                     as pos,
)sql" R"sql(                                                                           0                                                                     as val) t1
)sql" R"sql(                                                                   union
)sql" R"sql(                                                                   select
)sql" R"sql(                                                                     raw,
)sql" R"sql(                                                                     substr(raw, pos + 1, 1),
)sql" R"sql(                                                                     pos + 1,
)sql" R"sql(                                                                     (instr('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz{}', substr(raw, pos + 1, 1)) - 1)
)sql" R"sql(                                                                   from r
)sql" R"sql(                                                                   where length(raw) > r.pos)
)sql" R"sql(                                        select
)sql" R"sql(                                          *,
)sql" R"sql(                                          dd1 + half_diff as dd1_inc,
)sql" R"sql(                                          dd2 - half_diff as dd2_dec
)sql" R"sql(                                        from (select
)sql" R"sql(                                                *,
)sql" R"sql(                                                case when dd2 - dd1 = 0 then 0 when dd2 - dd1 > 0 then (dd2 - dd1) / 2 else (64 * 64 + dd2 - dd1) / 2 end as half_diff
)sql" R"sql(                                              from (select
)sql" R"sql(                                                      *,
)sql" R"sql(                                                      64 * d1 + lead(d1, 1, 0) over (order by pos) as dd1,
)sql" R"sql(                                                      64 * d2 + lead(d2, 1, 0) over (order by pos) as dd2
)sql" R"sql(                                                    from (select
)sql" R"sql(                                                            r1.pos,
)sql" R"sql(                                                            coalesce(r1.val, 0) as d1,
)sql" R"sql(                                                            coalesce(r2.val, 0) as d2
)sql" R"sql(                                                          from (select * from r where raw = (select '0' || _text_order from _add_message_res) and pos > 0) r1
)sql" R"sql(                                                            left join (select * from r where raw = (select (int_order - _int_order) || text_order from _add_message_res) and pos > 0) r2
)sql" R"sql(                                                              on r1.pos = r2.pos
)sql" R"sql(                                                          union all
)sql" R"sql(                                                          select
)sql" R"sql(                                                            r1.pos,
)sql" R"sql(                                                            coalesce(r2.val, 0) as d1,
)sql" R"sql(                                                            coalesce(r1.val, 0) as d2
)sql" R"sql(                                                          from (select * from r where raw = (select (int_order - _int_order) || text_order from _add_message_res) and pos > 0) r1
)sql" R"sql(                                                            left join (select * from r where raw = (select '0' || _text_order from _add_message_res) and pos > 0) r2
)sql" R"sql(                                                              on r1.pos = r2.pos
)sql" R"sql(                                                          where r2.pos is null) t1) t2) t3
)sql" R"sql(                                        where half_diff > 0
)sql" R"sql(                                        order by pos asc
)sql" R"sql(                                        limit 1) t4
)sql" R"sql(                                        union
)sql" R"sql(                                        select
)sql" R"sql(                                          cnt + 1                                                                                                  as cnt,
)sql" R"sql(                                          val / 64                                                                                                 as val,
)sql" R"sql(                                          val - (val / 64 * 64)                                                                                    as residual,
)sql" R"sql(                                          substr('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz{}', val - (val / 64 * 64) + 1, 1) as digit,
)sql" R"sql(                                          pos1,
)sql" R"sql(                                          dd2_dec
)sql" R"sql(                                        from dec_to64
)sql" R"sql(                                        where val > 0)
)sql" R"sql(            select result
)sql" R"sql(            from (select
)sql" R"sql(                    substr(case when dd2_dec < 0 then (select '0' || _text_order from _add_message_res) else (select (int_order - _int_order) || text_order from _add_message_res) end || '000000000', 1, pos1 - 1) || substr('00000000' || group_concat(digit, ''), -2, 2) as result,
)sql" R"sql(                    1                                                                                                                                                                                                                                                       as priority
)sql" R"sql(                  from (select *
)sql" R"sql(                        from dec_to64
)sql" R"sql(                        where val > 0 or residual > 0
)sql" R"sql(                        order by cnt desc) t
)sql" R"sql(                  union all
)sql" R"sql(                  select
)sql" R"sql(                    substr((select (int_order - _int_order) || text_order from _add_message_res) || '000000000', 1, pos1 - 1),
)sql" R"sql(                    2
)sql" R"sql(                  from dec_to64
)sql" R"sql(                  where cnt = 0
)sql" R"sql(                        and val = 0) res
)sql" R"sql(            where result is not null
)sql" R"sql(            order by priority asc
)sql" R"sql(            limit 1)
)sql" R"sql(where _diff <= 0;
)sql"}, {
      R"sql(update _add_message_res
)sql" R"sql(set int_order = _int_order + cast(substr(_tmp, 1, 1) as int),
)sql" R"sql(  text_order  = substr(_tmp, 2)
)sql" R"sql(where _diff <= 0;
)sql"}, {
      R"sql(update _add_message_res
)sql" R"sql(set error    = 3,
)sql" R"sql(  int_order  = null,
)sql" R"sql(  text_order = null
)sql" R"sql(where exists(select 1
)sql" R"sql(             from messages
)sql" R"sql(             where id = (select _message_id from _add_message_args));
)sql"}, {
      R"sql(insert or ignore into messages (id, chat_id, int_order, text_order, bucket_number, client_timestamp, type, sender, sender_type, parent_message_id, original_message_id, content, container)
)sql" R"sql(  select
)sql" R"sql(    _message_id,
)sql" R"sql(    _chat_id,
)sql" R"sql(    (select int_order from _add_message_res),
)sql" R"sql(    (select text_order from _add_message_res),
)sql" R"sql(    _bucket_number,
)sql" R"sql(    _time_stamp,
)sql" R"sql(    _type,
)sql" R"sql(    _sender,
)sql" R"sql(    _sender_type,
)sql" R"sql(    _parent_message_id,
)sql" R"sql(    _original_message_id,
)sql" R"sql(    _content,
)sql" R"sql(    _container
)sql" R"sql(  from _add_message_args;
)sql"}, {
      R"sql(update _add_message_res
)sql" R"sql(set error    = -1,
)sql" R"sql(  int_order  = null,
)sql" R"sql(  text_order = null
)sql" R"sql(where not exists(select 1
)sql" R"sql(                 from messages
)sql" R"sql(                 where id = (select _message_id from _add_message_args));
)sql"}, {
      R"sql(update messages
)sql" R"sql(set is_active = 0
)sql" R"sql(where (select error from _add_message_res) = 0
)sql" R"sql(      and chat_id = (select _chat_id from _add_message_args)
)sql" R"sql(      and id != (select _message_id from _add_message_args)
)sql" R"sql(      and (id = (select _original_message_id from _add_message_args) or original_message_id = (select _original_message_id from _add_message_args))
)sql" R"sql(      and is_active = 1
)sql" R"sql(      and (select int_order, text_order from _add_message_res) > (select
)sql" R"sql(                                                                    int_order,
)sql" R"sql(                                                                    text_order
)sql" R"sql(                                                                  from messages
)sql" R"sql(                                                                  where chat_id = (select _chat_id from _add_message_args)
)sql" R"sql(                                                                        and id != (select _message_id from _add_message_args)
)sql" R"sql(                                                                        and (id = (select _original_message_id from _add_message_args) or original_message_id = (select _original_message_id from _add_message_args))
)sql" R"sql(                                                                        and is_active = 1
)sql" R"sql(                                                                  order by int_order desc, text_order desc
)sql" R"sql(                                                                  limit 1);
)sql"}, {
      R"sql(select
)sql" R"sql(  int_order,
)sql" R"sql(  text_order,
)sql" R"sql(  error
)sql" R"sql(from _add_message_res;
)sql", ExecType::query}, {
      R"sql(delete from _add_message_args;
)sql"}, {
      R"sql(delete from _add_message_res;
)sql"}
};
const std::vector<ScriptDescr> addPersonalContext = {{
      R"sql(begin immediate;
)sql"}, {
      R"sql(pragma foreign_keys = on;
)sql"}, {
      R"sql(delete from _add_personal_context_args;
)sql"}, {
      R"sql(insert into _add_personal_context_args
)sql" R"sql(values (?, ?, ?, ?, ?, ? / 1000.0, ? / 1000.0, ?, ?, ?, ?, ?, ?);
)sql", ExecType::execute, true}, {
      R"sql(insert or ignore into chats (id, type, version, creator, created_at)
)sql" R"sql(  select
)sql" R"sql(    _chat_id,
)sql" R"sql(    _chat_type,
)sql" R"sql(    _chat_version,
)sql" R"sql(    _chat_creator,
)sql" R"sql(    _chat_created_at
)sql" R"sql(  from _add_personal_context_args;
)sql"}, {
      R"sql(insert into personal_contexts (chat_id, owner, message_id, created_at, modified_at, is_deleted, get_notifications, chat_title, draft)
)sql" R"sql(  select
)sql" R"sql(    _chat_id,
)sql" R"sql(    _owner,
)sql" R"sql(    _message_id,
)sql" R"sql(    _context_created_at,
)sql" R"sql(    _context_created_at,
)sql" R"sql(    _is_deleted,
)sql" R"sql(    _get_notifications,
)sql" R"sql(    _chat_title,
)sql" R"sql(    _draft
)sql" R"sql(  from _add_personal_context_args;
)sql"}, {
      R"sql(with _tmp(context_id) as (select last_insert_rowid())
)sql" R"sql(insert into unread_messages (context_id, message_id)
)sql" R"sql(  select
)sql" R"sql(    _tmp.context_id,
)sql" R"sql(    json_each.value
)sql" R"sql(  from _tmp, json_each((select _unread_messages from _add_personal_context_args));
)sql"}, {
      R"sql(delete from _add_personal_context_args;
)sql"}, {
      R"sql(commit;
)sql"}
};
const std::vector<ScriptDescr> addUndeliveredMessage = {{
      R"sql(delete from _add_undelivered_message_args;
)sql"}, {
      R"sql(insert into _add_undelivered_message_args
)sql" R"sql(values (?);
)sql", ExecType::execute, true}, {
      R"sql(with message as (select
)sql" R"sql(                   m.chat_id,
)sql" R"sql(                   m.sender,
)sql" R"sql(                   m.sender_type
)sql" R"sql(                 from messages m
)sql" R"sql(                 where m.id = (select _message_id from _add_undelivered_message_args))
)sql" R"sql(insert or ignore into undelivered_messages (message_id, participant_name, participant_type)
)sql" R"sql(  select
)sql" R"sql(    (select _message_id from _add_undelivered_message_args),
)sql" R"sql(    p.name,
)sql" R"sql(    p.type
)sql" R"sql(  from participants p
)sql" R"sql(  where p.context_id = (select max(gc.id)
)sql" R"sql(                        from global_contexts gc
)sql" R"sql(                        where gc.chat_id = (select m.chat_id from message m)
)sql" R"sql(                              and gc.is_valid = 1)
)sql" R"sql(        and (p.name, 2) != (select m.sender, m.sender_type from message m);
)sql"}, {
      R"sql(select
)sql" R"sql(  participant_name,
)sql" R"sql(  participant_type
)sql" R"sql(from undelivered_messages
)sql" R"sql(where message_id = (select _message_id from _add_undelivered_message_args);
)sql", ExecType::query}, {
      R"sql(delete from _add_undelivered_message_args;
)sql"}
};
const std::vector<ScriptDescr> countChatMessages = {{
      R"sql(select count(*) as cnt
)sql" R"sql(from messages m
)sql" R"sql(where m.chat_id = ?;
)sql", ExecType::query, true}
};
const std::vector<ScriptDescr> createGlobalContext100 = {{
      R"sql(delete from _create_global_context_args;
)sql"}, {
      R"sql(insert into _create_global_context_args
)sql" R"sql(values (?, ?, ?, ?, ?);
)sql", ExecType::execute, true}, {
      R"sql(insert or ignore into chats (id, type, version, creator)
)sql" R"sql(  select
)sql" R"sql(    _chat_id,
)sql" R"sql(    json_extract(_content, '$.type'),
)sql" R"sql(    json_extract(_content, '$.version'),
)sql" R"sql(    _sender
)sql" R"sql(  from _create_global_context_args;
)sql"}, {
      R"sql(insert into global_contexts (chat_id, message_id, chat_title)
)sql" R"sql(  select
)sql" R"sql(    _chat_id,
)sql" R"sql(    _message_id,
)sql" R"sql(    json_extract(_content, '$.title')
)sql" R"sql(  from _create_global_context_args
)sql" R"sql(  where json_extract(_content, '$.title') is not null;
)sql"}, {
      R"sql(delete from _create_global_context_args;
)sql"}
};
const std::vector<ScriptDescr> createGlobalContext101 = {{
      R"sql(pragma foreign_keys = on;
)sql"}, {
      R"sql(delete from _create_global_context_args;
)sql"}, {
      R"sql(insert into _create_global_context_args
)sql" R"sql(values (?, ?, ?, ?, ?);
)sql", ExecType::execute, true}, {
      R"sql(insert or ignore into chats (id, type, version, creator)
)sql" R"sql(  select
)sql" R"sql(    _chat_id,
)sql" R"sql(    1,
)sql" R"sql(    json_extract(_content, '$.version'),
)sql" R"sql(    _sender
)sql" R"sql(  from _create_global_context_args;
)sql"}, {
      R"sql(insert into global_contexts (chat_id, message_id, chat_title)
)sql" R"sql(  select
)sql" R"sql(    _chat_id,
)sql" R"sql(    _message_id,
)sql" R"sql(    json_extract(_content, '$.title')
)sql" R"sql(  from _create_global_context_args;
)sql"}, {
      R"sql(with _tmp(context_id) as (select last_insert_rowid())
)sql" R"sql(insert into participants (context_id, name, type)
)sql" R"sql(  select
)sql" R"sql(    _tmp.context_id,
)sql" R"sql(    json_extract(json_each.value, '$.name'),
)sql" R"sql(    json_extract(json_each.value, '$.type')
)sql" R"sql(  from _tmp, json_each((select json_extract(_content, '$.participants') from _create_global_context_args));
)sql"}, {
      R"sql(delete from _create_global_context_args;
)sql"}
};
const std::vector<ScriptDescr> createGlobalContext110 = {{
      R"sql(pragma foreign_keys = on;
)sql"}, {
      R"sql(delete from _create_global_context_args;
)sql"}, {
      R"sql(delete from _create_global_context_tmp;
)sql"}, {
      R"sql(insert into _create_global_context_args
)sql" R"sql(values (?, ?, ?, ?, ?);
)sql", ExecType::execute, true}, {
      R"sql(insert into _create_global_context_tmp
)sql" R"sql(  select
)sql" R"sql(    id,
)sql" R"sql(    chat_title
)sql" R"sql(  from global_contexts
)sql" R"sql(  where chat_id = (select _chat_id from _create_global_context_args)
)sql" R"sql(        and is_valid = 1
)sql" R"sql(  order by id desc
)sql" R"sql(  limit 1;
)sql"}, {
      R"sql(insert into global_contexts (chat_id, message_id, chat_title)
)sql" R"sql(  select
)sql" R"sql(    _chat_id,
)sql" R"sql(    _message_id,
)sql" R"sql(    (select chat_title from _create_global_context_tmp)
)sql" R"sql(  from _create_global_context_args;
)sql"}, {
      R"sql(with _tmp(new_context_id) as (select last_insert_rowid())
)sql" R"sql(insert into participants (context_id, name, type)
)sql" R"sql(  select
)sql" R"sql(    (select new_context_id from _tmp),
)sql" R"sql(    name,
)sql" R"sql(    type
)sql" R"sql(  from participants
)sql" R"sql(  where context_id = (select old_context_id from _create_global_context_tmp)
)sql" R"sql(  union
)sql" R"sql(  select
)sql" R"sql(    (select new_context_id from _tmp),
)sql" R"sql(    json_extract(_content, '$.name'),
)sql" R"sql(    json_extract(_content, '$.type')
)sql" R"sql(  from _create_global_context_args;
)sql"}, {
      R"sql(delete from _create_global_context_args;
)sql"}, {
      R"sql(delete from _create_global_context_tmp;
)sql"}
};
const std::vector<ScriptDescr> createGlobalContext111 = {{
      R"sql(pragma foreign_keys = on;
)sql"}, {
      R"sql(delete from _create_global_context_args;
)sql"}, {
      R"sql(delete from _create_global_context_tmp;
)sql"}, {
      R"sql(insert into _create_global_context_args
)sql" R"sql(values (?, ?, ?, ?, ?);
)sql", ExecType::execute, true}, {
      R"sql(insert into _create_global_context_tmp
)sql" R"sql(  select
)sql" R"sql(    id,
)sql" R"sql(    chat_title
)sql" R"sql(  from global_contexts
)sql" R"sql(  where chat_id = (select _chat_id from _create_global_context_args)
)sql" R"sql(        and is_valid = 1
)sql" R"sql(  order by id desc
)sql" R"sql(  limit 1;
)sql"}, {
      R"sql(insert into global_contexts (chat_id, message_id, chat_title)
)sql" R"sql(  select
)sql" R"sql(    _chat_id,
)sql" R"sql(    _message_id,
)sql" R"sql(    (select chat_title from _create_global_context_tmp)
)sql" R"sql(  from _create_global_context_args;
)sql"}, {
      R"sql(with _tmp(new_context_id) as (select last_insert_rowid())
)sql" R"sql(insert into participants (context_id, name, type)
)sql" R"sql(  select
)sql" R"sql(    (select new_context_id from _tmp),
)sql" R"sql(    name,
)sql" R"sql(    type
)sql" R"sql(  from participants
)sql" R"sql(  where context_id = (select old_context_id from _create_global_context_tmp)
)sql" R"sql(        and (name, type) not in (select
)sql" R"sql(                                   json_extract(_content, '$.name'),
)sql" R"sql(                                   json_extract(_content, '$.type')
)sql" R"sql(                                 from _create_global_context_args);
)sql"}, {
      R"sql(delete from _create_global_context_args;
)sql"}, {
      R"sql(delete from _create_global_context_tmp;
)sql"}
};
const std::vector<ScriptDescr> createPersonalContext400 = {{
      R"sql(with _args(_message_id, _type, _content) as (select ?, ?, ?)
)sql" R"sql(insert into personal_contexts (chat_id, message_id, owner, chat_title)
)sql" R"sql(  select
)sql" R"sql(    json_extract(_content, '$.chat_id'),
)sql" R"sql(    _message_id,
)sql" R"sql(    json_extract(_content, '$.owner'),
)sql" R"sql(    json_extract(_content, '$.chat_title')
)sql" R"sql(  from _args;
)sql", ExecType::execute, true}
};
const std::vector<ScriptDescr> createPersonalContext401 = {{
      R"sql(with _args(_message_id, _type, _content) as (select ?, ?, ?)
)sql" R"sql(insert into personal_contexts (chat_id, message_id, owner, is_deleted)
)sql" R"sql(  select
)sql" R"sql(    json_extract(_content, '$.chat_id'),
)sql" R"sql(    _message_id,
)sql" R"sql(    json_extract(_content, '$.owner'),
)sql" R"sql(    1
)sql" R"sql(  from _args;
)sql", ExecType::execute, true}
};
const std::vector<ScriptDescr> getAllUndeliveredMessages = {{
      R"sql(select
)sql" R"sql(  t.message_id,
)sql" R"sql(  m.chat_id,
)sql" R"sql(  m.int_order,
)sql" R"sql(  m.text_order,
)sql" R"sql(  m.client_timestamp as time_stamp,
)sql" R"sql(  m.bucket_number,
)sql" R"sql(  m.type,
)sql" R"sql(  m.sender,
)sql" R"sql(  m.sender_type,
)sql" R"sql(  m.parent_message_id,
)sql" R"sql(  m.original_message_id,
)sql" R"sql(  m.content,
)sql" R"sql(  m.container,
)sql" R"sql(  t.participants
)sql" R"sql(from (select
)sql" R"sql(        um.message_id,
)sql" R"sql(        json_group_array(json_object('name', um.participant_name,
)sql" R"sql(                                     'type', um.participant_type)) as participants
)sql" R"sql(      from undelivered_messages um
)sql" R"sql(      group by um.message_id) t
)sql" R"sql(  join messages m
)sql" R"sql(    on m.id = t.message_id;
)sql", ExecType::query}
};
const std::vector<ScriptDescr> getGlobalContext = {{
      R"sql(select
)sql" R"sql(  gc.chat_title,
)sql" R"sql(  c.type                            as chat_type,
)sql" R"sql(  c.version                         as chat_version,
)sql" R"sql(  c.creator                         as chat_creator,
)sql" R"sql(  cast(c.created_at * 1000 as int)  as chat_created_at,
)sql" R"sql(  cast(gc.created_at * 1000 as int) as context_created_at,
)sql" R"sql(  gc.message_id,
)sql" R"sql(  (select json_group_array(json_object('name', p.name, 'type', p.type))
)sql" R"sql(   from participants p
)sql" R"sql(   where p.context_id = gc.id)      as participants,
)sql" R"sql(  (select json_group_array(json_object('name', b.name, 'type', b.type))
)sql" R"sql(   from ban_list b
)sql" R"sql(   where b.context_id = gc.id)      as ban_list
)sql" R"sql(from global_contexts gc
)sql" R"sql(  join chats c
)sql" R"sql(    on c.id = gc.chat_id
)sql" R"sql(where gc.chat_id = ?
)sql" R"sql(      and gc.is_valid = 1
)sql" R"sql(order by gc.id desc
)sql" R"sql(limit 1;
)sql", ExecType::query, true}
};
const std::vector<ScriptDescr> getLastBucketNumber = {{
      R"sql(with _args(_chat_id) as (select ?)
)sql" R"sql(select
)sql" R"sql(  m.bucket_number,
)sql" R"sql(  count(*) as messages_cnt
)sql" R"sql(from messages m
)sql" R"sql(where m.chat_id = (select _chat_id from _args)
)sql" R"sql(      and m.bucket_number = (select max(m.bucket_number)
)sql" R"sql(                             from messages m
)sql" R"sql(                             where m.chat_id = (select _chat_id from _args))
)sql" R"sql(group by m.bucket_number;
)sql", ExecType::query, true}
};
const std::vector<ScriptDescr> getLastMessages = {{
      R"sql(select *
)sql" R"sql(from (select
)sql" R"sql(        m.id               as message_id,
)sql" R"sql(        m.parent_message_id,
)sql" R"sql(        m.client_timestamp as time_stamp,
)sql" R"sql(        m.bucket_number,
)sql" R"sql(        m.int_order,
)sql" R"sql(        m.text_order
)sql" R"sql(      from messages m
)sql" R"sql(      where m.chat_id = ?
)sql" R"sql(      order by m.int_order desc, m.text_order desc
)sql" R"sql(      limit ?) t
)sql" R"sql(order by t.int_order asc, t.text_order asc;
)sql", ExecType::query, true}
};
const std::vector<ScriptDescr> getMessage = {{
      R"sql(with _args(_message_id, _user, _is_active) as (select ?, ?, ?),
)sql" R"sql(    tab as (select
)sql" R"sql(              m.int_order,
)sql" R"sql(              m.text_order
)sql" R"sql(            from messages m
)sql" R"sql(            where (select _is_active from _args) = 1
)sql" R"sql(                  and m.id = (select f.message_id
)sql" R"sql(                              from first_visible_messages f
)sql" R"sql(                              where f.chat_id = (select t.chat_id
)sql" R"sql(                                                 from messages t
)sql" R"sql(                                                 where t.id = (select _message_id from _args))
)sql" R"sql(                                    and lower(f.participant_name) = (select lower(_user) from _args)))
)sql" R"sql(select
)sql" R"sql(  m.chat_id,
)sql" R"sql(  m.int_order,
)sql" R"sql(  m.text_order,
)sql" R"sql(  m.client_timestamp as time_stamp,
)sql" R"sql(  m.bucket_number,
)sql" R"sql(  m.type,
)sql" R"sql(  m.sender,
)sql" R"sql(  m.sender_type,
)sql" R"sql(  m.parent_message_id,
)sql" R"sql(  m.original_message_id,
)sql" R"sql(  m.content,
)sql" R"sql(  m.container
)sql" R"sql(from messages m
)sql" R"sql(where m.id = (select _message_id from _args)
)sql" R"sql(      and (coalesce((select _is_active from _args), 0) != 1 or (m.is_active = 1 and ((select 1 from tab) is null or (m.int_order, m.text_order) >= (select t.int_order, t.text_order from tab t))));
)sql", ExecType::query, true}
};
const std::vector<ScriptDescr> getMessages = {{
      R"sql(with _args(_chat_id, _user, _cnt, _to_message_id) as (select ?, ?, ?, ?),
)sql" R"sql(    fvm as (select
)sql" R"sql(              m.int_order,
)sql" R"sql(              m.text_order
)sql" R"sql(            from messages m
)sql" R"sql(            where m.id = (select f.message_id
)sql" R"sql(                          from first_visible_messages f
)sql" R"sql(                          where f.chat_id = (select _chat_id from _args)
)sql" R"sql(                                and lower(f.participant_name) = (select lower(_user) from _args))),
)sql" R"sql(    tab as (select
)sql" R"sql(              m.id,
)sql" R"sql(              case when m.is_active = 0
)sql" R"sql(                then (select t.id
)sql" R"sql(                      from messages t
)sql" R"sql(                      where t.original_message_id = m.id
)sql" R"sql(                            and t.is_active = 1)
)sql" R"sql(              else null end as new_id,
)sql" R"sql(              m.int_order,
)sql" R"sql(              m.text_order,
)sql" R"sql(              m.client_timestamp,
)sql" R"sql(              m.bucket_number,
)sql" R"sql(              m.type,
)sql" R"sql(              m.sender,
)sql" R"sql(              m.sender_type,
)sql" R"sql(              m.parent_message_id,
)sql" R"sql(              m.original_message_id,
)sql" R"sql(              m.content,
)sql" R"sql(              m.container
)sql" R"sql(            from messages m
)sql" R"sql(            where m.chat_id = (select _chat_id from _args)
)sql" R"sql(                  and m.original_message_id is null
)sql" R"sql(                  and m.is_valid = 1
)sql" R"sql(                  and m.id not in (select json_extract(t.content, '$.message_id')
)sql" R"sql(                                   from messages t
)sql" R"sql(                                   where t.chat_id = (select _chat_id from _args)
)sql" R"sql(                                         and (t.type = 222
)sql" R"sql(                                              or (t.type = 221 and lower(t.sender) = (select lower(_user) from _args))))
)sql" R"sql(                  and ((select 1 from fvm) is null or (m.int_order, m.text_order) >= (select fvm.int_order, fvm.text_order from fvm))
)sql" R"sql(                  and ((select _to_message_id from _args) is null or (m.int_order, m.text_order) < (select
)sql" R"sql(                                                                                                      t.int_order,
)sql" R"sql(                                                                                                      t.text_order
)sql" R"sql(                                                                                                    from messages t
)sql" R"sql(                                                                                                    where t.id = (select _to_message_id from _args)))
)sql" R"sql(            order by m.int_order desc, m.text_order desc
)sql" R"sql(            limit (select _cnt from _args))
)sql" R"sql(select
)sql" R"sql(  coalesce(m.id, tab.id)                                   as message_id,
)sql" R"sql(  tab.int_order,
)sql" R"sql(  tab.text_order,
)sql" R"sql(  tab.client_timestamp                                     as time_stamp,
)sql" R"sql(  coalesce(m.bucket_number, tab.bucket_number)             as bucket_number,
)sql" R"sql(  tab.type,
)sql" R"sql(  tab.sender,
)sql" R"sql(  tab.sender_type,
)sql" R"sql(  coalesce(m.parent_message_id, tab.parent_message_id)     as parent_message_id,
)sql" R"sql(  coalesce(m.original_message_id, tab.original_message_id) as original_message_id,
)sql" R"sql(  coalesce(m.content, tab.content)                         as content,
)sql" R"sql(  coalesce(m.container, tab.container)                     as container
)sql" R"sql(from tab
)sql" R"sql(  left join messages m
)sql" R"sql(    on m.id = tab.new_id
)sql" R"sql(order by tab.int_order asc, tab.text_order asc;
)sql", ExecType::query, true}
};
const std::vector<ScriptDescr> getMessagesByBucketNumber = {{
      R"sql(select m.id as message_id
)sql" R"sql(from messages m
)sql" R"sql(where m.chat_id = ?
)sql" R"sql(      and m.bucket_number = ?
)sql" R"sql(order by m.int_order, m.text_order;
)sql", ExecType::query, true}
};
const std::vector<ScriptDescr> getMessagesForGlobalContext = {{
      R"sql(delete from _get_messages_for_global_context_tmp;
)sql"}, {
      R"sql(delete from _get_messages_for_global_context_res;
)sql"}, {
      R"sql(insert into _get_messages_for_global_context_tmp
)sql" R"sql(  select
)sql" R"sql(    m.chat_id,
)sql" R"sql(    m.int_order,
)sql" R"sql(    m.text_order
)sql" R"sql(  from messages m
)sql" R"sql(  where m.id = ?;
)sql", ExecType::execute, true}, {
      R"sql(with step1 as (select
)sql" R"sql(                 m.int_order,
)sql" R"sql(                 m.text_order
)sql" R"sql(               from messages m
)sql" R"sql(               where m.chat_id = (select chat_id from _get_messages_for_global_context_tmp)
)sql" R"sql(                     and cast(m.type as text) like '1%'
)sql" R"sql(                     and (m.int_order, m.text_order) < (select int_order, text_order from _get_messages_for_global_context_tmp)
)sql" R"sql(               order by m.int_order, m.text_order
)sql" R"sql(               limit 1),
)sql" R"sql(    step2 as (select
)sql" R"sql(                m.id                                       as message_id,
)sql" R"sql(                row_number() over (order by gc.created_at) as rn
)sql" R"sql(              from messages m
)sql" R"sql(                join global_contexts gc
)sql" R"sql(                  on m.id = gc.message_id
)sql" R"sql(              where m.chat_id = (select chat_id from _get_messages_for_global_context_tmp)
)sql" R"sql(                    and cast(m.type as text) like '1%'
)sql" R"sql(                    and (m.int_order, m.text_order) > (select step1.int_order, step1.text_order from step1)),
)sql" R"sql(    step3 as (select
)sql" R"sql(                m.id                                                   as message_id,
)sql" R"sql(                row_number() over (order by m.int_order, m.text_order) as rn
)sql" R"sql(              from messages m
)sql" R"sql(              where m.chat_id = (select chat_id from _get_messages_for_global_context_tmp)
)sql" R"sql(                    and cast(m.type as text) like '1%'
)sql" R"sql(                    and ((select 1 from step1) is null
)sql" R"sql(                         or (m.int_order, m.text_order) > (select step1.int_order, step1.text_order from step1)))
)sql" R"sql(insert into _get_messages_for_global_context_res
)sql" R"sql(  select step3.message_id
)sql" R"sql(  from step3
)sql" R"sql(    left join step2
)sql" R"sql(      on step3.rn = step2.rn
)sql" R"sql(  where step2.message_id is null
)sql" R"sql(        or step3.message_id != step2.message_id;
)sql"}, {
      R"sql(update global_contexts
)sql" R"sql(set is_valid = 0
)sql" R"sql(where message_id in (select message_id from _get_messages_for_global_context_res)
)sql" R"sql(      and is_valid = 1;
)sql"}, {
      R"sql(select
)sql" R"sql(  m.id               as message_id,
)sql" R"sql(  m.chat_id,
)sql" R"sql(  m.int_order,
)sql" R"sql(  m.text_order,
)sql" R"sql(  m.client_timestamp as time_stamp,
)sql" R"sql(  m.bucket_number,
)sql" R"sql(  m.type,
)sql" R"sql(  m.sender,
)sql" R"sql(  m.sender_type,
)sql" R"sql(  m.parent_message_id,
)sql" R"sql(  m.original_message_id,
)sql" R"sql(  m.content,
)sql" R"sql(  m.container
)sql" R"sql(from messages m
)sql" R"sql(  join _get_messages_for_global_context_res _res
)sql" R"sql(    on m.id = _res.message_id
)sql" R"sql(order by m.int_order, m.text_order;
)sql", ExecType::query}, {
      R"sql(delete from _get_messages_for_global_context_tmp;
)sql"}, {
      R"sql(delete from _get_messages_for_global_context_res;
)sql"}
};
const std::vector<ScriptDescr> getMessagesForPersonalContext = {{
      R"sql(delete from _get_messages_for_personal_context_tmp;
)sql"}, {
      R"sql(delete from _get_messages_for_personal_context_res;
)sql"}, {
      R"sql(insert into _get_messages_for_personal_context_tmp
)sql" R"sql(  select
)sql" R"sql(    m.chat_id,
)sql" R"sql(    m.int_order,
)sql" R"sql(    m.text_order
)sql" R"sql(  from messages m
)sql" R"sql(  where m.id = ?;
)sql", ExecType::execute, true}, {
      R"sql(with step1 as (select
)sql" R"sql(                 m.int_order,
)sql" R"sql(                 m.text_order
)sql" R"sql(               from messages m
)sql" R"sql(               where m.chat_id = (select chat_id from _get_messages_for_personal_context_tmp)
)sql" R"sql(                     and cast(m.type as text) like '4%'
)sql" R"sql(                     and (m.int_order, m.text_order) < (select int_order, text_order from _get_messages_for_personal_context_tmp)
)sql" R"sql(               order by m.int_order, m.text_order
)sql" R"sql(               limit 1),
)sql" R"sql(    step2 as (select
)sql" R"sql(                m.id                                       as message_id,
)sql" R"sql(                row_number() over (order by pc.created_at) as rn
)sql" R"sql(              from messages m
)sql" R"sql(                join personal_contexts pc
)sql" R"sql(                  on m.id = pc.message_id
)sql" R"sql(              where m.chat_id = (select chat_id from _get_messages_for_personal_context_tmp)
)sql" R"sql(                    and cast(m.type as text) like '4%'
)sql" R"sql(                    and (m.int_order, m.text_order) > (select step1.int_order, step1.text_order from step1)),
)sql" R"sql(    step3 as (select
)sql" R"sql(                m.id                                                   as message_id,
)sql" R"sql(                row_number() over (order by m.int_order, m.text_order) as rn
)sql" R"sql(              from messages m
)sql" R"sql(              where m.chat_id = (select chat_id from _get_messages_for_personal_context_tmp)
)sql" R"sql(                    and cast(m.type as text) like '4%'
)sql" R"sql(                    and ((select 1 from step1) is null
)sql" R"sql(                         or (m.int_order, m.text_order) > (select step1.int_order, step1.text_order from step1)))
)sql" R"sql(insert into _get_messages_for_personal_context_res
)sql" R"sql(  select step3.message_id
)sql" R"sql(  from step3
)sql" R"sql(    left join step2
)sql" R"sql(      on step3.rn = step2.rn
)sql" R"sql(  where step2.message_id is null
)sql" R"sql(        or step3.message_id != step2.message_id;
)sql"}, {
      R"sql(update personal_contexts
)sql" R"sql(set is_valid = 0
)sql" R"sql(where message_id in (select message_id from _get_messages_for_personal_context_res)
)sql" R"sql(      and is_valid = 1;
)sql"}, {
      R"sql(select
)sql" R"sql(  m.id                                 as message_id,
)sql" R"sql(  m.type,
)sql" R"sql(  m.content,
)sql" R"sql(  json_extract(m.content, '$.chat_id') as chat_id,
)sql" R"sql(  json_extract(m.content, '$.owner')   as owner
)sql" R"sql(from messages m
)sql" R"sql(  join _get_messages_for_personal_context_res _res
)sql" R"sql(    on m.id = _res.message_id
)sql" R"sql(order by m.int_order, m.text_order;
)sql", ExecType::query}, {
      R"sql(delete from _get_messages_for_personal_context_tmp;
)sql"}, {
      R"sql(delete from _get_messages_for_personal_context_res;
)sql"}
};
const std::vector<ScriptDescr> getMessagesToRetransmit = {{
      R"sql(with _args(_chat_id, _buckets, _messages) as (select ?, ?, ?)
)sql" R"sql(select
)sql" R"sql(  m.id               as message_id,
)sql" R"sql(  m.chat_id,
)sql" R"sql(  m.int_order,
)sql" R"sql(  m.text_order,
)sql" R"sql(  m.client_timestamp as time_stamp,
)sql" R"sql(  m.bucket_number,
)sql" R"sql(  m.type,
)sql" R"sql(  m.sender,
)sql" R"sql(  m.sender_type,
)sql" R"sql(  m.parent_message_id,
)sql" R"sql(  m.original_message_id,
)sql" R"sql(  m.content,
)sql" R"sql(  m.container
)sql" R"sql(from messages m
)sql" R"sql(  join (select m.id
)sql" R"sql(        from messages m
)sql" R"sql(        where m.chat_id = (select _chat_id from _args)
)sql" R"sql(              and m.bucket_number in (select value
)sql" R"sql(                                      from json_each((select _buckets from _args)))
)sql" R"sql(        except
)sql" R"sql(        select value
)sql" R"sql(        from json_each((select _messages from _args))) t
)sql" R"sql(    on t.id = m.id;
)sql", ExecType::query, true}
};
const std::vector<ScriptDescr> getParticipants = {{
      R"sql(select
)sql" R"sql(  p.name,
)sql" R"sql(  p.type
)sql" R"sql(from participants p
)sql" R"sql(where p.context_id = (select gc.id
)sql" R"sql(                      from global_contexts gc
)sql" R"sql(                      where gc.chat_id = ?
)sql" R"sql(                            and gc.is_valid = 1
)sql" R"sql(                      order by gc.id desc
)sql" R"sql(                      limit 1);
)sql", ExecType::query, true}
};
const std::vector<ScriptDescr> getPersonalContext = {{
      R"sql(with _args(_chat_id, _owner) as (select ?, ?),
)sql" R"sql(    tab1 as (select
)sql" R"sql(               pc.owner,
)sql" R"sql(               coalesce(pc.chat_title, (select gc.chat_title
)sql" R"sql(                                        from global_contexts gc
)sql" R"sql(                                        where gc.chat_id = pc.chat_id
)sql" R"sql(                                              and gc.is_valid = 1
)sql" R"sql(                                        order by gc.id desc
)sql" R"sql(                                        limit 1)) as chat_title,
)sql" R"sql(               c.type                             as chat_type,
)sql" R"sql(               c.version                          as chat_version,
)sql" R"sql(               c.creator                          as chat_creator,
)sql" R"sql(               cast(c.created_at * 1000 as int)   as chat_created_at,
)sql" R"sql(               cast(pc.created_at * 1000 as int)  as context_created_at,
)sql" R"sql(               pc.message_id,
)sql" R"sql(               pc.is_deleted,
)sql" R"sql(               pc.get_notifications,
)sql" R"sql(               (select json_array_length(json_group_array(um.message_id))
)sql" R"sql(                from unread_messages um
)sql" R"sql(                where um.context_id = pc.id)      as unread_messages_cnt,
)sql" R"sql(               (select json_group_array(um.message_id)
)sql" R"sql(                from unread_messages um
)sql" R"sql(                where um.context_id = pc.id)      as unread_messages,
)sql" R"sql(               pc.draft,
)sql" R"sql(               (select m.id
)sql" R"sql(                from messages m
)sql" R"sql(                where m.chat_id = pc.chat_id
)sql" R"sql(                      and cast(m.type as text) like '2%'
)sql" R"sql(                order by m.int_order desc, m.text_order desc
)sql" R"sql(                limit 1)                          as last_message_id
)sql" R"sql(             from personal_contexts pc
)sql" R"sql(               join (select max(pc.id) as id
)sql" R"sql(                     from personal_contexts pc
)sql" R"sql(                     where pc.chat_id = (select _chat_id from _args)
)sql" R"sql(                           and pc.owner = (select _owner from _args)
)sql" R"sql(                           and pc.is_valid = 1) t
)sql" R"sql(                 on t.id = pc.id
)sql" R"sql(               join chats c
)sql" R"sql(                 on c.id = pc.chat_id)
)sql" R"sql(select
)sql" R"sql(  tab1.owner,
)sql" R"sql(  tab1.chat_title,
)sql" R"sql(  tab1.chat_type,
)sql" R"sql(  tab1.chat_version,
)sql" R"sql(  tab1.chat_creator,
)sql" R"sql(  tab1.chat_created_at,
)sql" R"sql(  tab1.context_created_at,
)sql" R"sql(  tab1.message_id,
)sql" R"sql(  tab1.is_deleted,
)sql" R"sql(  tab1.get_notifications,
)sql" R"sql(  tab1.unread_messages_cnt,
)sql" R"sql(  tab1.unread_messages,
)sql" R"sql(  tab1.draft,
)sql" R"sql(  m.type                             as last_message_type,
)sql" R"sql(  m.sender                           as last_message_sender,
)sql" R"sql(  m.sender_type                      as last_message_sender_type,
)sql" R"sql(  cast(m.db_timestamp * 1000 as int) as last_message_db_timestamp,
)sql" R"sql(  m.content                          as last_message_content
)sql" R"sql(from tab1
)sql" R"sql(  left join messages m
)sql" R"sql(    on m.id = tab1.last_message_id;
)sql", ExecType::query, true}
};
const std::vector<ScriptDescr> getUndeliveredMessagesByChatId = {{
      R"sql(select distinct
)sql" R"sql(  um.message_id,
)sql" R"sql(  m.chat_id,
)sql" R"sql(  m.int_order,
)sql" R"sql(  m.text_order,
)sql" R"sql(  m.client_timestamp as time_stamp,
)sql" R"sql(  m.bucket_number,
)sql" R"sql(  m.type,
)sql" R"sql(  m.sender,
)sql" R"sql(  m.sender_type,
)sql" R"sql(  m.parent_message_id,
)sql" R"sql(  m.original_message_id,
)sql" R"sql(  m.content,
)sql" R"sql(  m.container
)sql" R"sql(from undelivered_messages um
)sql" R"sql(  join messages m
)sql" R"sql(    on m.id = um.message_id
)sql" R"sql(where m.chat_id = ?;
)sql", ExecType::query, true}
};
const std::vector<ScriptDescr> getUserPersonalContexts = {{
      R"sql(with _args(_name, _cnt, _page) as (select ?, ?, ?),
)sql" R"sql(    tab1 as (select
)sql" R"sql(               pc.chat_id,
)sql" R"sql(               coalesce(pc.chat_title, (select gc.chat_title
)sql" R"sql(                                        from global_contexts gc
)sql" R"sql(                                        where gc.chat_id = pc.chat_id
)sql" R"sql(                                              and gc.is_valid = 1
)sql" R"sql(                                        order by gc.id desc
)sql" R"sql(                                        limit 1)) as chat_title,
)sql" R"sql(               c.type                             as chat_type,
)sql" R"sql(               c.version                          as chat_version,
)sql" R"sql(               c.creator                          as chat_creator,
)sql" R"sql(               cast(c.created_at * 1000 as int)   as chat_created_at,
)sql" R"sql(               cast(pc.created_at * 1000 as int)  as context_created_at,
)sql" R"sql(               pc.message_id,
)sql" R"sql(               pc.is_deleted,
)sql" R"sql(               pc.get_notifications,
)sql" R"sql(               (select json_array_length(json_group_array(um.message_id))
)sql" R"sql(                from unread_messages um
)sql" R"sql(                where um.context_id = pc.id)      as unread_messages_cnt,
)sql" R"sql(               (select json_group_array(um.message_id)
)sql" R"sql(                from unread_messages um
)sql" R"sql(                where um.context_id = pc.id)      as unread_messages,
)sql" R"sql(               pc.draft,
)sql" R"sql(               (select m.id
)sql" R"sql(                from messages m
)sql" R"sql(                where m.chat_id = pc.chat_id
)sql" R"sql(                      and cast(m.type as text) like '2%'
)sql" R"sql(                order by m.int_order desc, m.text_order desc
)sql" R"sql(                limit 1)                          as last_message_id
)sql" R"sql(             from personal_contexts pc
)sql" R"sql(               join (select max(pc.id) as id
)sql" R"sql(                     from personal_contexts pc
)sql" R"sql(                     where pc.owner = (select _name from _args)
)sql" R"sql(                           and pc.is_valid = 1
)sql" R"sql(                     group by pc.chat_id) t
)sql" R"sql(                 on t.id = pc.id
)sql" R"sql(               join chats c
)sql" R"sql(                 on c.id = pc.chat_id
)sql" R"sql(             order by pc.created_at desc
)sql" R"sql(             limit (select _cnt from _args)
)sql" R"sql(             offset (select _cnt from _args) * ((select _page from _args) - 1))
)sql" R"sql(select
)sql" R"sql(  tab1.chat_id,
)sql" R"sql(  tab1.chat_title,
)sql" R"sql(  tab1.chat_type,
)sql" R"sql(  tab1.chat_version,
)sql" R"sql(  tab1.chat_creator,
)sql" R"sql(  tab1.chat_created_at,
)sql" R"sql(  tab1.context_created_at,
)sql" R"sql(  tab1.message_id,
)sql" R"sql(  tab1.is_deleted,
)sql" R"sql(  tab1.get_notifications,
)sql" R"sql(  tab1.unread_messages_cnt,
)sql" R"sql(  tab1.unread_messages,
)sql" R"sql(  tab1.draft,
)sql" R"sql(  m.type                             as last_message_type,
)sql" R"sql(  m.sender                           as last_message_sender,
)sql" R"sql(  m.sender_type                      as last_message_sender_type,
)sql" R"sql(  cast(m.db_timestamp * 1000 as int) as last_message_db_timestamp,
)sql" R"sql(  m.content                          as last_message_content
)sql" R"sql(from tab1
)sql" R"sql(  left join messages m
)sql" R"sql(    on m.id = tab1.last_message_id;
)sql", ExecType::query, true}
};
const std::vector<ScriptDescr> hasMessage = {{
      R"sql(select exists(select 1
)sql" R"sql(              from messages m
)sql" R"sql(              where m.id = ?) as has_message;
)sql", ExecType::query, true}
};
const std::vector<ScriptDescr> removeUndeliveredMessage = {{
      R"sql(begin immediate;
)sql"}, {
      R"sql(delete from undelivered_messages
)sql" R"sql(where message_id = ?
)sql" R"sql(      and lower(participant_name) = lower(?);
)sql", ExecType::execute, true}, {
      R"sql(select case when (select changes()) > 0 then 0 else 1 end as error;
)sql", ExecType::query}, {
      R"sql(commit;
)sql"}
};
const std::vector<ScriptDescr> updateMessageChain = {{
      R"sql(delete from _update_message_chain_args;
)sql"}, {
      R"sql(delete from _update_message_chain_tmp;
)sql"}, {
      R"sql(insert into _update_message_chain_args
)sql" R"sql(values (?);
)sql", ExecType::execute, true}, {
      R"sql(with recursive r as (select id
)sql" R"sql(                     from messages
)sql" R"sql(                     where parent_message_id = (select _message_id from _update_message_chain_args)
)sql" R"sql(                           and chat_id = (select chat_id
)sql" R"sql(                                          from messages
)sql" R"sql(                                          where id = (select _message_id from _update_message_chain_args))
)sql" R"sql(                     union
)sql" R"sql(                     select m.id
)sql" R"sql(                     from messages m
)sql" R"sql(                       join r
)sql" R"sql(                         on r.id = m.parent_message_id
)sql" R"sql(                     where m.chat_id = (select chat_id
)sql" R"sql(                                        from messages
)sql" R"sql(                                        where id = (select _message_id from _update_message_chain_args)))
)sql" R"sql(insert into _update_message_chain_tmp
)sql" R"sql(  select
)sql" R"sql(    m.id,
)sql" R"sql(    m.int_order,
)sql" R"sql(    m.text_order,
)sql" R"sql(    m.chat_id,
)sql" R"sql(    m.client_timestamp,
)sql" R"sql(    m.parent_message_id
)sql" R"sql(  from messages m
)sql" R"sql(    join r
)sql" R"sql(      on r.id = m.id
)sql" R"sql(  order by m.int_order, m.text_order;
)sql"}, {
      R"sql(select
)sql" R"sql(  m.id as message_id,
)sql" R"sql(  m.int_order,
)sql" R"sql(  m.text_order
)sql" R"sql(from messages m
)sql" R"sql(  join _update_message_chain_tmp t
)sql" R"sql(    on m.id = t.message_id
)sql" R"sql(       and (m.int_order, m.text_order) != (t.int_order, t.text_order)
)sql" R"sql(order by m.int_order, m.text_order;
)sql", ExecType::query}, {
      R"sql(delete from _update_message_chain_args;
)sql"}, {
      R"sql(delete from _update_message_chain_tmp;
)sql"}
};

}
}

