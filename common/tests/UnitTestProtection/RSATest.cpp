#include "ProtectionLib/RSA.h"

#include <gtest/gtest.h>

#include <openssl/bio.h>
#include <openssl/bn.h>
#include <openssl/pem.h>
#include <openssl/rsa.h>

#include <array>

namespace rsa_test {

static const char public_key_pem[] =
	"-----BEGIN PUBLIC KEY-----\n"
	"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ca1ViqabbjpH9Maw8DV\n"
	"WRkENqOK8D2BRG4JWLetaeTs4aOT/Psf3jO3HdT3G/VSsgQ1MxdqptUYh5/EPOto\n"
	"SicGOE6h2/PrczyGxlQAnAzLOVxsPspPFe4IgWXNOevaGKTuXwoM8cXWZWniHu8j\n"
	"CDBTYLVF57uPWAF6kEv8KsaZ8YBc1vT4dERwbSh8rB5YET6PbDEfQvJc/pRahWrp\n"
	"meQu17rTLYPWUNXpRdy6dYVQCBvBED9BQBiygwEqcYm2kZF2p2v6qyqquFtKW1MX\n"
	"IUkXvYo0P1bCA4Ufamgh015n1GPwCls1Q7NAaWC4fRJ4hNNF45hxOo40SeAmK0c9\n"
	"pwIDAQAB\n"
	"-----END PUBLIC KEY-----\n";
static const std::array<unsigned char, 256> public_key_n = {
	// This can be extracted from the public key above by calling
	//     openssl rsa -pubin -in file.pem -modulus
	// The value will be in the line starting with Modulus=
	0xE5, 0xC6, 0xB5, 0x56, 0x2A, 0x9A, 0x6D, 0xB8, 0xE9, 0x1F, 0xD3, 0x1A, 0xC3, 0xC0, 0xD5, 0x59,
	0x19, 0x04, 0x36, 0xA3, 0x8A, 0xF0, 0x3D, 0x81, 0x44, 0x6E, 0x09, 0x58, 0xB7, 0xAD, 0x69, 0xE4,
	0xEC, 0xE1, 0xA3, 0x93, 0xFC, 0xFB, 0x1F, 0xDE, 0x33, 0xB7, 0x1D, 0xD4, 0xF7, 0x1B, 0xF5, 0x52,
	0xB2, 0x04, 0x35, 0x33, 0x17, 0x6A, 0xA6, 0xD5, 0x18, 0x87, 0x9F, 0xC4, 0x3C, 0xEB, 0x68, 0x4A,
	0x27, 0x06, 0x38, 0x4E, 0xA1, 0xDB, 0xF3, 0xEB, 0x73, 0x3C, 0x86, 0xC6, 0x54, 0x00, 0x9C, 0x0C,
	0xCB, 0x39, 0x5C, 0x6C, 0x3E, 0xCA, 0x4F, 0x15, 0xEE, 0x08, 0x81, 0x65, 0xCD, 0x39, 0xEB, 0xDA,
	0x18, 0xA4, 0xEE, 0x5F, 0x0A, 0x0C, 0xF1, 0xC5, 0xD6, 0x65, 0x69, 0xE2, 0x1E, 0xEF, 0x23, 0x08,
	0x30, 0x53, 0x60, 0xB5, 0x45, 0xE7, 0xBB, 0x8F, 0x58, 0x01, 0x7A, 0x90, 0x4B, 0xFC, 0x2A, 0xC6,
	0x99, 0xF1, 0x80, 0x5C, 0xD6, 0xF4, 0xF8, 0x74, 0x44, 0x70, 0x6D, 0x28, 0x7C, 0xAC, 0x1E, 0x58,
	0x11, 0x3E, 0x8F, 0x6C, 0x31, 0x1F, 0x42, 0xF2, 0x5C, 0xFE, 0x94, 0x5A, 0x85, 0x6A, 0xE9, 0x99,
	0xE4, 0x2E, 0xD7, 0xBA, 0xD3, 0x2D, 0x83, 0xD6, 0x50, 0xD5, 0xE9, 0x45, 0xDC, 0xBA, 0x75, 0x85,
	0x50, 0x08, 0x1B, 0xC1, 0x10, 0x3F, 0x41, 0x40, 0x18, 0xB2, 0x83, 0x01, 0x2A, 0x71, 0x89, 0xB6,
	0x91, 0x91, 0x76, 0xA7, 0x6B, 0xFA, 0xAB, 0x2A, 0xAA, 0xB8, 0x5B, 0x4A, 0x5B, 0x53, 0x17, 0x21,
	0x49, 0x17, 0xBD, 0x8A, 0x34, 0x3F, 0x56, 0xC2, 0x03, 0x85, 0x1F, 0x6A, 0x68, 0x21, 0xD3, 0x5E,
	0x67, 0xD4, 0x63, 0xF0, 0x0A, 0x5B, 0x35, 0x43, 0xB3, 0x40, 0x69, 0x60, 0xB8, 0x7D, 0x12, 0x78,
	0x84, 0xD3, 0x45, 0xE3, 0x98, 0x71, 0x3A, 0x8E, 0x34, 0x49, 0xE0, 0x26, 0x2B, 0x47, 0x3D, 0xA7,
};
static const std::array<unsigned char, 3> public_key_e = { // 65537
	0x01, 0x00, 0x01,
};

static const std::array<unsigned char, 20> digest = {
	0x94, 0x9b, 0x59, 0x92, 0x9f,
	0x25, 0x6c, 0xde, 0x72, 0x93,
	0xfd, 0x14, 0x5b, 0xc7, 0x33,
	0xc3, 0xa2, 0x04, 0x1f, 0x53,
};

static const std::array<unsigned char, 256> signature = {
	0x5f, 0xbb, 0xff, 0x01, 0x79, 0x4d, 0xac, 0x55, 0x1e, 0xb0, 0x02, 0x1d, 0x96, 0xf1, 0x0f, 0xb1,
	0x0e, 0xb8, 0xd9, 0xfd, 0xfc, 0xdd, 0xa7, 0xca, 0x25, 0x92, 0x42, 0xad, 0xf2, 0x81, 0xc2, 0x64,
	0x53, 0xec, 0x49, 0x4c, 0x9b, 0x93, 0xd1, 0xcc, 0x0c, 0x31, 0x53, 0xe7, 0x7c, 0xaa, 0xd4, 0x73,
	0xf2, 0x29, 0x23, 0xb4, 0xed, 0xcb, 0x26, 0x72, 0x89, 0x4c, 0x07, 0x28, 0xa8, 0xbb, 0x88, 0x54,
	0xf4, 0xae, 0xa9, 0xb4, 0x72, 0xc4, 0xac, 0x5d, 0xea, 0xd7, 0xea, 0x0e, 0xd1, 0x9a, 0xee, 0xbc,
	0x41, 0x23, 0xa9, 0xa8, 0x01, 0x95, 0xe3, 0x26, 0x3b, 0xa8, 0xa7, 0x07, 0xf5, 0x4b, 0x6c, 0xab,
	0x65, 0x0b, 0xb5, 0xa5, 0x32, 0xc8, 0x9b, 0x47, 0x73, 0x8e, 0x9d, 0x48, 0xe9, 0xd1, 0x98, 0x43,
	0x94, 0xf2, 0x2b, 0xe5, 0xf5, 0x0b, 0x16, 0xfc, 0x5d, 0x3f, 0x2e, 0x5f, 0x1c, 0x7a, 0xf0, 0x91,
	0xe8, 0x9a, 0x9f, 0xb5, 0xfa, 0x76, 0x88, 0x0d, 0x8e, 0x28, 0x9e, 0x44, 0xd8, 0xb2, 0xb9, 0x68,
	0xcf, 0xa2, 0xcc, 0x1d, 0xe0, 0x02, 0xff, 0x26, 0xc7, 0xfa, 0x22, 0x34, 0xf1, 0x9a, 0x21, 0xc2,
	0x75, 0x39, 0x92, 0xa2, 0x35, 0xe9, 0xfa, 0xdd, 0xe7, 0x54, 0x3e, 0xb5, 0x0b, 0x85, 0x8a, 0x29,
	0xe5, 0x8c, 0x51, 0xf4, 0x28, 0xc2, 0xc3, 0x19, 0xce, 0xf4, 0x78, 0x8a, 0x02, 0xac, 0xe9, 0x19,
	0xf0, 0x6e, 0x52, 0xec, 0x92, 0xc6, 0x1a, 0x61, 0xb6, 0x53, 0xad, 0x5f, 0xff, 0x46, 0xb0, 0xc3,
	0xf4, 0x1c, 0x1a, 0x3d, 0x55, 0x1c, 0x61, 0xbc, 0xe2, 0x5a, 0x10, 0xbb, 0x24, 0x1e, 0x64, 0xa5,
	0x87, 0x55, 0xe4, 0xf9, 0xd8, 0x06, 0x8d, 0x14, 0x5c, 0x19, 0x29, 0x5f, 0x93, 0xa4, 0xc2, 0x11,
	0xa0, 0x16, 0x15, 0x24, 0x0b, 0xe6, 0x3d, 0xff, 0xb6, 0xbe, 0xda, 0xbc, 0xc2, 0x1f, 0x8b, 0x08,
};

TEST(RSA, Verify)
{
	auto n = protection::BN_bin2bn(public_key_n.data(), public_key_n.size(), nullptr);
	ASSERT_NE(nullptr, n);
	auto e = protection::BN_bin2bn(public_key_e.data(), public_key_e.size(), nullptr);
	ASSERT_NE(nullptr, e);
	EXPECT_EQ(1, protection::RSA_verify_SHA1_PKCS1_type_1(digest.data(), digest.size(), signature.data(), signature.size(), n, e));
	protection::BN_free(e);
	protection::BN_free(n);
}

TEST(RSA, Verify_BadDigest)
{
	auto n = protection::BN_bin2bn(public_key_n.data(), public_key_n.size(), nullptr);
	ASSERT_NE(nullptr, n);
	auto e = protection::BN_bin2bn(public_key_e.data(), public_key_e.size(), nullptr);
	ASSERT_NE(nullptr, e);
	auto bad_digest = digest;
	bad_digest[13] ^= 0xaa;
	EXPECT_EQ(-protection::RSA_BAD_SIGNATURE, protection::RSA_verify_SHA1_PKCS1_type_1(bad_digest.data(), bad_digest.size(), signature.data(), signature.size(), n, e));
	protection::BN_free(e);
	protection::BN_free(n);
}

TEST(RSA, Verify_BadSignature)
{
	auto n = protection::BN_bin2bn(public_key_n.data(), public_key_n.size(), nullptr);
	ASSERT_NE(nullptr, n);
	auto e = protection::BN_bin2bn(public_key_e.data(), public_key_e.size(), nullptr);
	ASSERT_NE(nullptr, e);
	auto bad_signature = signature;
	bad_signature[13] ^= 0xaa;
	EXPECT_NE(1, protection::RSA_verify_SHA1_PKCS1_type_1(digest.data(), digest.size(), bad_signature.data(), bad_signature.size(), n, e));
	protection::BN_free(e);
	protection::BN_free(n);
}

TEST(RSA, Verify_BadN)
{
	auto bad_public_key_n = public_key_n;
	bad_public_key_n[13] ^= 0xaa;
	auto n = protection::BN_bin2bn(bad_public_key_n.data(), bad_public_key_n.size(), nullptr);
	ASSERT_NE(nullptr, n);
	auto e = protection::BN_bin2bn(public_key_e.data(), public_key_e.size(), nullptr);
	ASSERT_NE(nullptr, e);
	EXPECT_NE(1, protection::RSA_verify_SHA1_PKCS1_type_1(digest.data(), digest.size(), signature.data(), signature.size(), n, e));
	protection::BN_free(e);
	protection::BN_free(n);
}

TEST(RSA, Verify_BadE)
{
	auto n = protection::BN_bin2bn(public_key_n.data(), public_key_n.size(), nullptr);
	ASSERT_NE(nullptr, n);
	auto bad_public_key_e = public_key_e;
	bad_public_key_e[1] ^= 0xaa;
	auto e = protection::BN_bin2bn(bad_public_key_e.data(), bad_public_key_e.size(), nullptr);
	ASSERT_NE(nullptr, e);
	EXPECT_NE(1, protection::RSA_verify_SHA1_PKCS1_type_1(digest.data(), digest.size(), signature.data(), signature.size(), n, e));
	protection::BN_free(e);
	protection::BN_free(n);
}

TEST(RSA, BN_bin2bn_static)
{
	auto n = protection::BN_bin2bn(public_key_n.data(), public_key_n.size(), nullptr);
	char n_static_buffer[32 + public_key_n.size()];
	auto n_static = protection::BN_bin2bn_static(public_key_n.data(), public_key_n.size(), n_static_buffer);
	EXPECT_EQ(0, protection::BN_ucmp(n, n_static));
	protection::BN_free(n_static); // Check that BN_free() can be called.
	protection::BN_free(n);
}

TEST(RSA, BN_word2bn_static)
{
	auto e = protection::BN_bin2bn(public_key_e.data(), public_key_e.size(), nullptr);
	char e_static_buffer[32 + public_key_e.size()];
	auto e_static = protection::BN_word2bn_static(65537, e_static_buffer);
	EXPECT_EQ(0, protection::BN_ucmp(e, e_static));
	protection::BN_free(e_static); // Check that BN_free() can be called.
	protection::BN_free(e);
}

// Check that values of the modulus (public_key_n) and the public exponent (public_key_e)
// were correctly manually extracted from the public key (public_key_pem).
TEST(RSA, PrecomputedRSAParameters)
{
	BIO* bio = BIO_new(BIO_s_mem());
	ASSERT_NE(bio, nullptr);
	EXPECT_EQ(static_cast<int>(sizeof(public_key_pem)), BIO_write(bio, public_key_pem, sizeof(public_key_pem)));

	RSA* rsa = PEM_read_bio_RSA_PUBKEY(bio, nullptr, nullptr, nullptr);
	ASSERT_NE(rsa, nullptr);

	auto n = BN_bin2bn(public_key_n.data(), public_key_n.size(), nullptr);
	ASSERT_NE(nullptr, n);
	auto e = BN_bin2bn(public_key_e.data(), public_key_e.size(), nullptr);
	ASSERT_NE(nullptr, e);

	const BIGNUM* genuine_n;
	const BIGNUM* genuine_e;
	RSA_get0_key(rsa, &genuine_n, &genuine_e, nullptr);
	EXPECT_EQ(0, BN_cmp(genuine_n, n));
	EXPECT_EQ(0, BN_cmp(genuine_e, e));

	BN_free(e);
	BN_free(n);
	RSA_free(rsa);
	BIO_free(bio);
}

}
