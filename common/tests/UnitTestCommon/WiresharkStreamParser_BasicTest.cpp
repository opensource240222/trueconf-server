#if defined(_WIN32) // Not ported yet

#include "../../../WiresharkStreamParser/WiresharkStreamParser.h"

#include <sstream>
#include <gtest/gtest.h>

static const char *test_data =
"// This is a comment.\n"
"   // And another one.\n"
"char peer0_0[] = { /* Packet 146 */\n"
"0x03, 0x00, 0x00, 0xbf, 0x08, 0x02, 0x72, 0xae, \n"
"0x05, 0x04, 0x04, 0x89, 0x18, 0x8c, 0xa5, 0x28, \n"
"0x16, 0x62, 0x40, 0x62, 0x72, 0x63, 0x68, 0x6b, \n"
"0x30, 0x30, 0x30, 0x2e, 0x74, 0x72, 0x75, 0x65, \n"
"0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x75, 0x61, 0x7e, \n"
"0x00, 0x95, 0x05, 0x20, 0xa8, 0x06, 0x00, 0x08, \n"
"0x91, 0x4a, 0x00, 0x04, 0x01, 0x40, 0x15, 0x00, \n"
"0x62, 0x00, 0x40, 0x00, 0x62, 0x00, 0x72, 0x00, \n"
"0x63, 0x00, 0x68, 0x00, 0x6b, 0x00, 0x30, 0x00, \n"
"0x30, 0x00, 0x30, 0x00, 0x2e, 0x00, 0x74, 0x00, \n"
"0x72, 0x00, 0x75, 0x00, 0x65, 0x00, 0x63, 0x00, \n"
"0x6f, 0x00, 0x6e, 0x00, 0x66, 0x00, 0x2e, 0x00, \n"
"0x75, 0x00, 0x61, 0x22, 0xc0, 0xb8, 0x00, 0x00, \n"
"0x00, 0x0f, 0x54, 0x72, 0x75, 0x65, 0x43, 0x6f, \n"
"0x6e, 0x66, 0x20, 0x47, 0x61, 0x74, 0x65, 0x77, \n"
"0x61, 0x79, 0x02, 0x34, 0x2e, 0x33, 0x00, 0xc0, \n"
"0xa8, 0x3e, 0x2a, 0x06, 0xb8, 0x00, 0x46, 0x32, \n"
"0x65, 0x8f, 0xed, 0x9c, 0x28, 0xdf, 0xb3, 0x06, \n"
"0xf0, 0x00, 0x13, 0x34, 0x20, 0x4c, 0x00, 0xcd, \n"
"0x0c, 0x02, 0x00, 0x07, 0x00, 0xc0, 0xa8, 0x29, \n"
"0x8c, 0xd4, 0xbe, 0x11, 0x00, 0x46, 0x32, 0x65, \n"
"0x8f, 0xed, 0x9c, 0x28, 0xdf, 0xb3, 0x06, 0xf0, \n"
"0x00, 0x13, 0x34, 0x20, 0x4c, 0x01, 0x00, 0x01, \n"
"0x00, 0x01, 0x00, 0x10, 0x04, 0x01, 0x00 };\n"
"char peer1_0[] = { /* Packet 148 */\n"
"0x03, 0x00, 0x00, 0x64, 0x08, 0x02, 0xf2, 0xae, \n"
"0x01, 0x7e, 0x00, 0x58, 0x05, 0x23, 0x80, 0x06, \n"
"0x00, 0x08, 0x91, 0x4a, 0x00, 0x04, 0x22, 0xc0, \n"
"0xb5, 0x00, 0x23, 0x31, 0x0a, 0x48, 0x44, 0x58, \n"
"0x20, 0x38, 0x30, 0x30, 0x30, 0x20, 0x48, 0x44, \n"
"0x18, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, \n"
"0x20, 0x2d, 0x20, 0x32, 0x2e, 0x35, 0x2e, 0x30, \n"
"0x2e, 0x38, 0x5f, 0x6e, 0x65, 0x2d, 0x34, 0x30, \n"
"0x33, 0x35, 0x01, 0xb0, 0xd8, 0x00, 0x11, 0x00, \n"
"0x46, 0x32, 0x65, 0x8f, 0xed, 0x9c, 0x28, 0xdf, \n"
"0xb3, 0x06, 0xf0, 0x00, 0x13, 0x34, 0x20, 0x4c, \n"
"0x01, 0x00, 0x01, 0x80, 0x01, 0x00, 0x01, 0x40, \n"
"0x10, 0x80, 0x01, 0x00 };\n"
"char peer1_1[] = { /* Packet 150 */\n"
"0x03, 0x00, 0x00, 0x84, 0x08, 0x02, 0xf2, 0xae, \n"
"0x07, 0x28, 0x07, 0x68, 0x64, 0x78, 0x38, 0x30, \n"
"0x30, 0x30, 0x7e, 0x00, 0x6f, 0x05, 0x22, 0xc0, \n"
"0x06, 0x00, 0x08, 0x91, 0x4a, 0x00, 0x04, 0x00, \n"
"0xc0, 0xa8, 0x3e, 0x2a, 0x0c, 0xa0, 0x22, 0xc0, \n"
"0xb5, 0x00, 0x23, 0x31, 0x0a, 0x48, 0x44, 0x58, \n"
"0x20, 0x38, 0x30, 0x30, 0x30, 0x20, 0x48, 0x44, \n"
"0x18, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, \n"
"0x20, 0x2d, 0x20, 0x32, 0x2e, 0x35, 0x2e, 0x30, \n"
"0x2e, 0x38, 0x5f, 0x6e, 0x65, 0x2d, 0x34, 0x30, \n"
"0x33, 0x35, 0x00, 0x46, 0x32, 0x65, 0x8f, 0xed, \n"
"0x9c, 0x28, 0xdf, 0xb3, 0x06, 0xf0, 0x00, 0x13, \n"
"0x34, 0x20, 0x4c, 0x1d, 0x0c, 0xc0, 0x11, 0x00, \n"
"0x46, 0x32, 0x65, 0x8f, 0xed, 0x9c, 0x28, 0xdf, \n"
"0xb3, 0x06, 0xf0, 0x00, 0x13, 0x34, 0x20, 0x4c, \n"
"0x01, 0x00, 0x01, 0x80, 0x01, 0x00, 0x01, 0x40, \n"
"0x10, 0x80, 0x01, 0x00 };\n"
"char peer0_1[] = { /* Packet 10289 */\n"
"0x03, 0x00, 0x00, 0x1a, 0x08, 0x02, 0x72, 0xae, \n"
"0x5a, 0x7e, 0x00, 0x0e, 0x05, 0x25, 0x00, 0x06, \n"
"0x00, 0x08, 0x91, 0x4a, 0x00, 0x04, 0x10, 0x04, \n"
"0x01, 0x00 };\n"
"\n"
"";

namespace WiresharkStreamParser_test
{
	class WiresharkStreamParserTest :
		public ::testing::Test
	{
	protected:
		WiresharkStreamParserTest()
		{}

		virtual void SetUp()
		{}

		virtual void TearDown()
		{}

		WiresharkStreamParser m_parser;
	};

	TEST_F(WiresharkStreamParserTest, BasicTest)
	{
		std::string error_message;
		ASSERT_TRUE(m_parser.Parse(test_data, error_message));
		ASSERT_TRUE(error_message.empty()) << "Parsing failed with message: " << error_message << std::endl;

		auto stream = m_parser.GetStream();
		ASSERT_TRUE(stream != nullptr);

		ASSERT_EQ(stream->packets.size(), 4);
		ASSERT_EQ(stream->peers.size(), 2);
		ASSERT_EQ(stream->peers[0]->peer_no, 0);
		ASSERT_EQ(stream->peers[0]->packets.size(), 2);
		ASSERT_EQ(stream->peers[1]->peer_no, 1);
		ASSERT_EQ(stream->peers[1]->packets.size(), 2);


		// validate data
		for (const auto& peer : stream->peers)
		{
			for (const auto& packet : peer->packets)
			{
				ASSERT_EQ(packet->peer_no, peer->peer_no);
			}
		}

		for (size_t i = 0; i < stream->packets.size(); i++)
		{
			auto packet = stream->packets[i];
			auto peer = stream->peers[packet->peer_no];

			ASSERT_EQ(packet->stream_packet_no, i);
			ASSERT_EQ(packet, peer->packets[packet->peer_packet_no]);
		}
	}
}

#endif
