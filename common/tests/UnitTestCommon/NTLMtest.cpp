#include <gtest/gtest.h>
#include <algorithm>
#include <array>

#include "SecureLib/NTLMDataHeaders.h"
#include "SecureLib/NTLMFlags.h"
#include "SecureLib/NTLMRoutines.h"
#include "SecureLib/OpenSSLTypesWrapImpl.h"
#include "std-generic/cpplib/utf8.h"
#include "std/cpplib/base64.h"
#include "TrueGateway/sip/VS_SIPSeqSSPI.h"

std::string DecodeChallenge(const char *encodedChallenge, size_t len) {
	assert(encodedChallenge != nullptr && len > 0);

	size_t challengeLen(1024);
	char decodedChallenge[1024] = {};
	if (!base64_decode(encodedChallenge, len, decodedChallenge, challengeLen)) return {};

	return std::string(decodedChallenge, decodedChallenge + challengeLen);
}

void InsertField(unsigned char* begin, size_t size, std::vector<unsigned char>&field) {
	field.insert(field.end(), begin, begin + size);
}

void InsertField(unsigned char* begin, size_t size, uint32_t negFlags, std::string&field) {
	if (NTLMSSP_NEGOTIATE_UNICODE & negFlags) {
		assert(size % 2 == 0);
		field = vs::UTF16toUTF8Convert(u16string_view((char16_t*)begin, size / 2));
		return;
	}
	field.insert(field.end(), begin, begin + size);
}

bool DecodeAuth(std::vector<unsigned char> &data, ntlm::AUTH_MSG& res) {
	auto pData = data.data();
	auto& head = *reinterpret_cast<ntlm::AUTHENTICATE_MESSAGE_HEADER *>(pData);
	res.negotiateFlags = head.negotiateFlags;

	if (strcmp(head.signature, "NTLMSSP") != 0)
		return false;
	if (head.messageType != 3)
		return false;
	if (head.lmChallengeResponse.responseLen > 0)
		InsertField(pData + head.lmChallengeResponse.responseBufferOffset, head.lmChallengeResponse.responseLen, res.lmChallengeResponse);
	if (head.ntChallengeResponse.responseLen > 0)
		InsertField(pData + head.ntChallengeResponse.responseBufferOffset, head.ntChallengeResponse.responseLen, res.ntChallengeResponse);
	if (head.domainName.responseLen > 0)
		InsertField(pData + head.domainName.responseBufferOffset, head.domainName.responseLen, res.negotiateFlags, res.domainName);
	if (head.userName.responseLen > 0)
		InsertField(pData + head.userName.responseBufferOffset, head.userName.responseLen, res.negotiateFlags, res.userName);
	if (head.workstation.responseLen > 0)
		InsertField(pData + head.workstation.responseBufferOffset, head.workstation.responseLen, res.negotiateFlags, res.workstation);
	if (head.encryptedRandomSessionKey.responseLen > 0)
		InsertField(pData + head.encryptedRandomSessionKey.responseBufferOffset, head.encryptedRandomSessionKey.responseLen, res.encryptedRandomSessionKey);

	return true;
}

TEST(NTLM, authentication) {
	const char login[] = "user6";
	const char passwd[] = "qweASD123";
	const char domain[] = "192.168.74.4";
	const char serverChallenge[] = "TlRMTVNTUAACAAAAAAAAADgAAADzgpji+qDppPyr9XwAAAAAAAAAAJoAmgA4AAAABgGxHQAAAA8CAAgATABZAE4AQwABAB4ATABZAE4AQwAyADAAMQAzAC0AUwBFAFIAVgBFAFIABAAQAGwAeQBuAGMALgBsAG8AYwADADAATABZAE4AQwAyADAAMQAzAC0AUwBFAFIAVgBFAFIALgBsAHkAbgBjAC4AbABvAGMABQAQAGwAeQBuAGMALgBsAG8AYwAHAAgANuVZB8xM0wEAAAAA";

	// Initialization
	VS_SIPSeqSSPI sspi(VS_SIPSeqSSPI::NTLM);
	EXPECT_TRUE(sspi.AcquireCred(login, passwd, domain));
	std::vector<unsigned char> dummy;
	EXPECT_EQ(sspi.InitContext(nullptr, 0, dummy), VS_SIPSeqSSPI::ContinueNeeded);

	// Receive server challenge and make AUTHENTICATE MESSAGE
	auto decodedChallenge = DecodeChallenge(serverChallenge, sizeof(serverChallenge) - 1);
	EXPECT_FALSE(decodedChallenge.empty());

	std::vector<unsigned char> authenticateMessage;
	EXPECT_EQ(sspi.InitContext(decodedChallenge.c_str(), decodedChallenge.length(), authenticateMessage), VS_SIPSeqSSPI::Ok);
	EXPECT_FALSE(authenticateMessage.empty());

	ntlm::AUTH_MSG authMsg = {};
	DecodeAuth(authenticateMessage, authMsg);

	EXPECT_EQ(authMsg.encryptedRandomSessionKey.size(),16u);
	EXPECT_NE(authMsg.ntChallengeResponse.size(), 0u);
	EXPECT_STREQ(authMsg.userName.c_str(), login);
	EXPECT_STREQ(authMsg.domainName.c_str(), domain);
}

TEST(NTLMv1, KeyWeakening) {
	std::vector<unsigned char> masterKey = { 0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x00 };
	std::vector<unsigned char> expectedSealKey56 = { 0x01,0x02,0x03,0x04,0x05,0x06,0x07,0xa0 };
	std::vector<unsigned char> expectedSealKey40 = { 0x01,0x02,0x03,0x04,0x05,0xe5,0x38,0xb0 };

	uint32_t flags(0);
	flags |= NTLMSSP_NEGOTIATE_LM_KEY;

	std::vector<unsigned char> sealKey;
	ntlm::SEALKEY(flags, masterKey.data(), "Client", sealKey);
	EXPECT_EQ(sealKey, expectedSealKey40);

	sealKey.clear();
	flags |= NTLMSSP_NEGOTIATE_56;
	ntlm::SEALKEY(flags, masterKey.data(), "Client", sealKey);
	EXPECT_EQ(sealKey, expectedSealKey56);
}

TEST(NTLMv1, Signing) {
	unsigned char data[] = { 0x6a, 0x43, 0x49, 0x46, 0x53 };
	unsigned char key[] = { 0x01, 0x02, 0x03, 0x04, 0x05, 0xe5, 0x38, 0xb0 };
	unsigned char expectedSign[] = { 0x01, 0x00, 0x00, 0x00, 0x78, 0x01, 0x09, 0x00, 0x39, 0x74, 0x20, 0xfe, 0x0e, 0x5a, 0x0f, 0x89 };
	uint32_t negFlags = 0 | NTLMSSP_NEGOTIATE_SIGN;

	ntlm::sessionKey k;
	RC4_set_key(k.rc4Handle.get().get(), sizeof(key), key);
	k.seq = 0;

	std::array<unsigned char, 16u> sign;
	ntlm::MakeSignature(data, sizeof(data), k, negFlags, sign);
	EXPECT_TRUE(memcmp(expectedSign, sign.data(), 4) == 0);
	EXPECT_TRUE(memcmp(expectedSign + 8, sign.data() + 8, 8) == 0);
}

struct NTLMSessionKeyTest : public ::testing::Test {
	std::vector<unsigned char> randSessionKey = std::vector<unsigned char>(16,0x55);
	unsigned char serverChallenge[8] = { 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef };
	unsigned char clientChallenge[8] = { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa };
	uint64_t winTicks = 0;
	const std::string user = "User", domain = "Domain", workstation = "COMPUTER", password = "Password";
	std::vector<unsigned char> serverData = {
		0x02, 0x00, 0x0c, 0x00, 0x44, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x69, 0x00, 0x6e, 0x00,
		0x01, 0x00, 0x0c, 0x00, 0x53, 0x00, 0x65, 0x00, 0x72, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00,
		0x00, 0x00, 0x00, 0x00 };
	// session security part
	std::vector<unsigned char> text = { 0x50, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x74, 0x00, 0x65, 0x00, 0x78, 0x00 , 0x74 ,0x00 };

	void VerifySessionSecurity(
		  uint32_t flags, bool useNTLMv2, std::vector<unsigned char>& sessionBaseK, std::vector<unsigned char>& lm
		, std::vector<unsigned char>&expEncrMSG
		, std::vector<unsigned char>&expSealKey
		, std::vector<unsigned char>&expSignKey
		, std::array<unsigned char, 16u>& expSignature
		, std::vector<unsigned char>& exectedKxKey)
	{
		unsigned char LMTOWF[16] = {};
		if(!useNTLMv2)
			ntlm::LMOWFv1(password, LMTOWF);

		std::vector<unsigned char> kxKey(16, 0x00);
		ntlm::KXKEY(flags, sessionBaseK.data(), lm, serverChallenge, LMTOWF, useNTLMv2, kxKey.data());
		EXPECT_EQ(exectedKxKey, kxKey);

		std::vector<unsigned char> exportedSessionKey = randSessionKey;
		if (!(NTLMSSP_NEGOTIATE_KEY_EXCH & flags)) {
			exportedSessionKey = kxKey;
		}

		std::vector<unsigned char> sealKey, signKey;
		ntlm::SEALKEY(flags, exportedSessionKey.data(), "Client", sealKey);
		ntlm::SIGNKEY(flags, exportedSessionKey.data(), "Client", signKey);
		EXPECT_EQ(expSealKey, sealKey);
		EXPECT_EQ(expSignKey, signKey);

		RC4_KEY handle;
		RC4_set_key(&handle, sealKey.size(), sealKey.data());

		std::vector<unsigned char> encrData(expEncrMSG.size(), 0x00);
		RC4(&handle, text.size(), text.data(), encrData.data());
		EXPECT_EQ(encrData, expEncrMSG);

		std::array<unsigned char, 16u> signature;
		ntlm::sessionKey k; k.sealkey = sealKey; k.signkey = signKey; k.seq = 0; *k.rc4Handle.get().get() = handle;
		ntlm::MakeSignature(text.data(), text.size(), k, flags, signature);
		if(NTLMSSP_NEGOTIATE_EXTENDED_SESSIONSECURITY & flags)
			EXPECT_EQ(signature, expSignature);
		else {
			// exclude random pad from verifycation
			EXPECT_TRUE(memcmp(signature.data(), expSignature.data(), 4) == 0);
			EXPECT_TRUE(memcmp(signature.data() + 8, expSignature.data() + 8, 8) == 0);
		}
	}

	void VerifyNTLMv1Authentication(
		  uint32_t flags
		, std::vector<unsigned char>&expectedAuthMSG
		, std::vector<unsigned char>&expectedLM
		, std::vector<unsigned char>&expectedNT
		, std::vector<unsigned char>&expectedSessionBaseKey
		, const std::vector<unsigned char>&expectedEncSessK
		, bool verifyEncrRandSessK) {
		std::vector<unsigned char> nt, lm;
		std::vector<unsigned char> sessKey(16, 0x00);
		ntlm::ComputeResponseV1(user, password, serverChallenge, clientChallenge, flags, false, nt, lm, sessKey.data());
		EXPECT_EQ(lm, expectedLM);
		EXPECT_EQ(nt, expectedNT);
		EXPECT_EQ(expectedSessionBaseKey, sessKey);

		std::vector<unsigned char> encryptedRandomSessionKey;
		if (NTLMSSP_NEGOTIATE_KEY_EXCH & flags) {
			std::vector<unsigned char> kxKey(16, 0x00);
			unsigned char LMTOWF[16] = {};
			ntlm::LMOWFv1(password, LMTOWF);
			ntlm::KXKEY(flags, sessKey.data(), lm, serverChallenge, LMTOWF, false, kxKey.data());

			ntlm::RC4Encrypt(kxKey.data(), randSessionKey.data(), randSessionKey.size(), encryptedRandomSessionKey);
			EXPECT_EQ(encryptedRandomSessionKey, expectedEncSessK);
		}

		ntlm::AUTH_MSG type3 = {};
		type3.userName = user;
		type3.domainName = domain;
		type3.workstation = workstation;
		type3.negotiateFlags = flags;
		type3.lmChallengeResponse = lm;
		type3.ntChallengeResponse = nt;
		type3.encryptedRandomSessionKey = encryptedRandomSessionKey;

		// Encode message
		size_t micOffset(0);
		std::vector<unsigned char> outAuthenticateMsg;
		ntlm::AuthMessageEncode(type3, outAuthenticateMsg, micOffset);

		ntlm::AUTH_MSG exp;
		DecodeAuth(expectedAuthMSG, exp);
		ntlm::AUTH_MSG real;
		DecodeAuth(outAuthenticateMsg, real);
		EXPECT_STREQ(real.userName.c_str(), exp.userName.c_str());
		EXPECT_STREQ(real.domainName.c_str(), exp.domainName.c_str());
		EXPECT_STREQ(real.workstation.c_str(), exp.workstation.c_str());
		EXPECT_EQ(real.lmChallengeResponse, exp.lmChallengeResponse);
		EXPECT_EQ(real.ntChallengeResponse, exp.ntChallengeResponse);
		if(verifyEncrRandSessK)
			EXPECT_EQ(real.encryptedRandomSessionKey, exp.encryptedRandomSessionKey);
		EXPECT_EQ(expectedAuthMSG.size(), outAuthenticateMsg.size() - sizeof(ntlm::AUTHENTICATE_MESSAGE_HEADER::MIC));	// MIC is not provided in example
	}
};

// test with values for validation from here https://msdn.microsoft.com/en-us/library/dd644747.aspx
TEST_F(NTLMSessionKeyTest, NTLMv2_ComputeSessionKey) {

	// init data
	uint32_t flags(0);
	auto pFlags = (unsigned char*)&flags;
	pFlags[0] = 0x33; pFlags[1] = 0x82; pFlags[2] = 0x8a; pFlags[3] = 0xe2;

	// expected data
	std::vector<unsigned char> expectedLM = { 0x86, 0xc3, 0x50, 0x97, 0xac, 0x9c, 0xec, 0x10, 0x25, 0x54, 0x76, 0x4a, 0x57, 0xcc, 0xcc, 0x19, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa };
	std::vector<unsigned char> expectedNT = { 0x68, 0xcd, 0x0a, 0xb8, 0x51, 0xe5, 0x1c, 0x96, 0xaa, 0xbc, 0x92, 0x7b, 0xeb, 0xef, 0x6a, 0x1c };
	std::vector<unsigned char> expectedSessionBaseKey = { 0x8d, 0xe4, 0x0c, 0xca, 0xdb, 0xc1, 0x4a, 0x82, 0xf1, 0x5c, 0xb0, 0xad, 0x0d, 0xe9, 0x5c, 0xa3 };
	std::vector<unsigned char> expectedEncSessK = { 0xc5, 0xda, 0xd2, 0x54, 0x4f, 0xc9, 0x79, 0x90, 0x94, 0xce, 0x1c, 0xe9, 0x0b, 0xc9, 0xd0, 0x3e };
	std::vector<unsigned char> expectedMsg = {
		0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00,
		0x6c, 0x00, 0x00, 0x00, 0x54, 0x00, 0x54, 0x00, 0x84, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x0c, 0x00,
		0x48, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x54, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00,
		0x5c, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x35, 0x82, 0x88, 0xe2,
		0x05, 0x01, 0x28, 0x0a, 0x00, 0x00, 0x00, 0x0f, 0x44, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x61, 0x00,
		0x69, 0x00, 0x6e, 0x00, 0x55, 0x00, 0x73, 0x00, 0x65, 0x00, 0x72, 0x00, 0x43, 0x00, 0x4f, 0x00,
		0x4d, 0x00, 0x50, 0x00, 0x55, 0x00, 0x54, 0x00, 0x45, 0x00, 0x52, 0x00, 0x86, 0xc3, 0x50, 0x97,
		0xac, 0x9c, 0xec, 0x10, 0x25, 0x54, 0x76, 0x4a, 0x57, 0xcc, 0xcc, 0x19, 0xaa, 0xaa, 0xaa, 0xaa,
		0xaa, 0xaa, 0xaa, 0xaa, 0x68, 0xcd, 0x0a, 0xb8, 0x51, 0xe5, 0x1c, 0x96, 0xaa, 0xbc, 0x92, 0x7b,
		0xeb, 0xef, 0x6a, 0x1c, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00,
		0x02, 0x00, 0x0c, 0x00, 0x44, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x69, 0x00, 0x6e, 0x00,
		0x01, 0x00, 0x0c, 0x00, 0x53, 0x00, 0x65, 0x00, 0x72, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc5, 0xda, 0xd2, 0x54, 0x4f, 0xc9, 0x79, 0x90,
		0x94 ,0xce ,0x1c ,0xe9 ,0x0b ,0xc9 ,0xd0 ,0x3e
	};

	//prepare client challenge
	std::vector<unsigned char> clientChallMSG;
	ntlm::MakeClientChallengeStruct(winTicks, clientChallenge, serverData, clientChallMSG);
	auto p = clientChallMSG.data();

	// compute keys
	std::vector<unsigned char> nt, lm;
	std::vector<unsigned char> sessKey(16, 0x00);
	ntlm::ComputeResponse(user, password, domain, serverChallenge, clientChallMSG, nt, lm, sessKey.data());
	EXPECT_EQ(lm, expectedLM);
	EXPECT_NE(std::search(nt.begin(), nt.begin() + expectedNT.size(), expectedNT.begin(), expectedNT.end()), nt.end());		// begin_with
	EXPECT_EQ(expectedSessionBaseKey, sessKey);

	std::vector<unsigned char> encryptedRandomSessionKey;
	ntlm::RC4Encrypt(sessKey.data(), randSessionKey.data(), randSessionKey.size(), encryptedRandomSessionKey);
	EXPECT_EQ(encryptedRandomSessionKey, expectedEncSessK);

	ntlm::AUTH_MSG type3 = {};
	type3.userName = user;
	type3.domainName = domain;
	type3.workstation = workstation;
	type3.negotiateFlags = flags;
	type3.lmChallengeResponse = lm;
	type3.ntChallengeResponse = nt;
	type3.encryptedRandomSessionKey = encryptedRandomSessionKey;

	// Encode message
	size_t micOffset(0);
	std::vector<unsigned char> outAuthenticateMsg;
	ntlm::AuthMessageEncode(type3, outAuthenticateMsg, micOffset);

	// Decode messages
	ntlm::AUTH_MSG computedMSG, expectedMSG;
	DecodeAuth(outAuthenticateMsg, computedMSG);
	DecodeAuth(expectedMsg, expectedMSG);

	// verify expectations
	EXPECT_EQ(computedMSG.domainName, expectedMSG.domainName);
	EXPECT_EQ(computedMSG.userName, expectedMSG.userName);
	EXPECT_EQ(computedMSG.workstation, expectedMSG.workstation);
	EXPECT_EQ(computedMSG.lmChallengeResponse, expectedMSG.lmChallengeResponse);
	EXPECT_EQ(computedMSG.ntChallengeResponse, expectedMSG.ntChallengeResponse);
	EXPECT_EQ(computedMSG.encryptedRandomSessionKey, expectedMSG.encryptedRandomSessionKey);
	EXPECT_EQ(expectedMsg.size(), outAuthenticateMsg.size() - sizeof(ntlm::AUTHENTICATE_MESSAGE_HEADER::MIC));	// MIC is not provided in example

	// session security part
	std::vector<unsigned char> expSealKey = { 0x59, 0xf6, 0x00, 0x97, 0x3c, 0xc4, 0x96, 0x0a, 0x25, 0x48, 0x0a, 0x7c, 0x19, 0x6e, 0x4c, 0x58 };
	std::vector<unsigned char> expSignKey = { 0x47, 0x88, 0xdc, 0x86, 0x1b, 0x47, 0x82, 0xf3, 0x5d, 0x43, 0xfd, 0x98, 0xfe, 0x1a, 0x2d, 0x39 };
	std::vector<unsigned char> expEncrMSG = { 0x54, 0xe5, 0x01, 0x65, 0xbf, 0x19, 0x36, 0xdc, 0x99, 0x60, 0x20, 0xc1, 0x81, 0x1b, 0x0f, 0x06, 0xfb, 0x5f };
	std::array<unsigned char, 16u> expSignature = { 0x01, 0x00, 0x00, 0x00, 0x7f, 0xb3, 0x8e, 0xc5, 0xc5, 0x5d, 0x49, 0x76, 0x00, 0x00, 0x00, 0x00 };

	VerifySessionSecurity(flags, true, sessKey, lm, expEncrMSG, expSealKey, expSignKey, expSignature, sessKey);
}

// test with values for validation from here https://msdn.microsoft.com/en-us/library/cc669105.aspx
TEST_F(NTLMSessionKeyTest, NTLMv1_ComputeSessionKey) {
	// init values
	uint32_t flags(0);
	auto pFlags = (unsigned char*)&flags;
	pFlags[0] = 0x33; pFlags[1] = 0x82; pFlags[2] = 0x0a; pFlags[3] = 0x82;

	// expected values
	std::vector<unsigned char> expectedSessionBaseKey = { 0xd8, 0x72, 0x62, 0xb0, 0xcd, 0xe4, 0xb1, 0xcb, 0x74, 0x99, 0xbe, 0xcc, 0xcd, 0xf1, 0x07, 0x84 };
	std::vector<unsigned char> expectedKxKey = { 0xeb, 0x93, 0x42, 0x9a, 0x8b, 0xd9, 0x52, 0xf8, 0xb8, 0x9c, 0x55, 0xb8, 0x7f, 0x47, 0x5e, 0xdc };
	std::vector<unsigned char> expectedLM = { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	std::vector<unsigned char> expectedNT = { 0x75, 0x37, 0xf8, 0x03, 0xae, 0x36, 0x71, 0x28, 0xca, 0x45, 0x82, 0x04, 0xbd, 0xe7, 0xca, 0xf8, 0x1e, 0x97, 0xed, 0x26, 0x83, 0x26, 0x72, 0x32 };
	std::vector<unsigned char> expectedAuthMSG = {
		0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00,
		0x6c, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00, 0x84, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x0c, 0x00,
		0x48, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x54, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00,
		0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0x35, 0x82, 0x08, 0x82,
		0x05, 0x01, 0x28, 0x0a, 0x00, 0x00, 0x00, 0x0f, 0x44, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x61, 0x00,
		0x69, 0x00, 0x6e, 0x00, 0x55, 0x00, 0x73, 0x00, 0x65, 0x00, 0x72, 0x00, 0x43, 0x00, 0x4f, 0x00,
		0x4d, 0x00, 0x50, 0x00, 0x55, 0x00, 0x54, 0x00, 0x45, 0x00, 0x52, 0x00, 0xaa, 0xaa, 0xaa, 0xaa,
		0xaa, 0xaa, 0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x75, 0x37, 0xf8, 0x03, 0xae, 0x36, 0x71, 0x28, 0xca, 0x45, 0x82, 0x04,
		0xbd, 0xe7, 0xca, 0xf8, 0x1e, 0x97, 0xed, 0x26, 0x83, 0x26, 0x72, 0x32
	};

	VerifyNTLMv1Authentication(flags, expectedAuthMSG, expectedLM, expectedNT, expectedSessionBaseKey, std::vector<unsigned char>(), true);

	// session security part
	// expected values
	std::vector<unsigned char> expSealKey = { 0x04, 0xdd, 0x7f, 0x01, 0x4d, 0x85, 0x04, 0xd2, 0x65, 0xa2, 0x5c, 0xc8, 0x6a, 0x3a, 0x7c, 0x06 };
	std::vector<unsigned char> expSignKey = { 0x60, 0xe7, 0x99, 0xbe, 0x5c, 0x72, 0xfc, 0x92, 0x92, 0x2a, 0xe8, 0xeb, 0xe9, 0x61, 0xfb, 0x8d };
	std::vector<unsigned char> expEncrText = { 0xa0, 0x23, 0x72, 0xf6, 0x53, 0x02, 0x73, 0xf3, 0xaa, 0x1e, 0xb9, 0x01, 0x90, 0xce, 0x52, 0x00, 0xc9, 0x9d };
	std::array<unsigned char, 16u> expSignature = { 0x01, 0x00, 0x00, 0x00, 0xff, 0x2a, 0xeb, 0x52, 0xf6, 0x81, 0x79, 0x3a, 0x00, 0x00, 0x00, 0x00};

	VerifySessionSecurity(flags, false, expectedSessionBaseKey, expectedLM, expEncrText, expSealKey, expSignKey, expSignature, expectedKxKey);
}

TEST_F(NTLMSessionKeyTest, NTLMv1_ComputeSessionKeyWithEncrypt) {
	// init values
	uint32_t flags(0);
	auto pFlags = (unsigned char*)&flags;
	pFlags[0] = 0x33; pFlags[1] = 0x82; pFlags[2] = 0x02; pFlags[3] = 0xe2;

	// expected values
	std::vector<unsigned char> expectedAuthMSG = {
		0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00,
		0x6c, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00, 0x84, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x0c, 0x00,
		0x48, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x54, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00,
		0x5c, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x9c, 0x00, 0x00, 0x00, 0x35, 0x82, 0x80, 0xe2,
		0x05, 0x01, 0x28, 0x0a, 0x00, 0x00, 0x00, 0x0f, 0x44, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x61, 0x00,
		0x69, 0x00, 0x6e, 0x00, 0x55, 0x00, 0x73, 0x00, 0x65, 0x00, 0x72, 0x00, 0x43, 0x00, 0x4f, 0x00,
		0x4d, 0x00, 0x50, 0x00, 0x55, 0x00, 0x54, 0x00, 0x45, 0x00, 0x52, 0x00, 0x98, 0xde, 0xf7, 0xb8,
		0x7f, 0x88, 0xaa, 0x5d, 0xaf, 0xe2, 0xdf, 0x77, 0x96, 0x88, 0xa1, 0x72, 0xde, 0xf1, 0x1c, 0x7d,
		0x5c, 0xcd, 0xef, 0x13, 0x67, 0xc4, 0x30, 0x11, 0xf3, 0x02, 0x98, 0xa2, 0xad, 0x35, 0xec, 0xe6,
		0x4f, 0x16, 0x33, 0x1c, 0x44, 0xbd, 0xbe, 0xd9, 0x27, 0x84, 0x1f, 0x94, 0x51, 0x88, 0x22, 0xb1,
		0xb3, 0xf3, 0x50, 0xc8, 0x95, 0x86, 0x82, 0xec, 0xbb, 0x3e, 0x3c, 0xb7
	};

	std::vector<unsigned char> expectedLMTOWF = { 0xe5, 0x2c, 0xac, 0x67, 0x41, 0x9a, 0x9a, 0x22, 0x4a, 0x3b, 0x10, 0x8f, 0x3f, 0xa6, 0xcb, 0x6d };
	std::vector<unsigned char> expectedNTOWF = { 0xa4, 0xf4, 0x9c, 0x40, 0x65, 0x10, 0xbd, 0xca, 0xb6, 0x82, 0x4e, 0xe7, 0xc3, 0x0f, 0xd8, 0x52 };
	std::vector<unsigned char> expectedSessBaseK = { 0xd8, 0x72, 0x62, 0xb0, 0xcd, 0xe4, 0xb1, 0xcb, 0x74, 0x99, 0xbe, 0xcc, 0xcd, 0xf1, 0x07, 0x84 };
	std::vector<unsigned char> expectedNT = { 0x67, 0xc4, 0x30, 0x11, 0xf3, 0x02, 0x98, 0xa2, 0xad, 0x35, 0xec, 0xe6, 0x4f, 0x16, 0x33, 0x1c, 0x44, 0xbd, 0xbe, 0xd9, 0x27, 0x84, 0x1f, 0x94 };
	std::vector<unsigned char> expectedLM = { 0x98, 0xde, 0xf7, 0xb8, 0x7f, 0x88, 0xaa, 0x5d, 0xaf, 0xe2, 0xdf, 0x77, 0x96, 0x88, 0xa1, 0x72, 0xde, 0xf1, 0x1c, 0x7d, 0x5c, 0xcd, 0xef, 0x13 };

	std::vector<unsigned char> expectedEncrRandKey = { 0x51, 0x88, 0x22, 0xb1, 0xb3, 0xf3, 0x50, 0xc8, 0x95, 0x86, 0x82, 0xec, 0xbb, 0x3e, 0x3c, 0xb7 };
	VerifyNTLMv1Authentication(flags, expectedAuthMSG, expectedLM, expectedNT, expectedSessBaseK, expectedEncrRandKey, true);

	std::vector<unsigned char> expectedEncrRandKeyNonNT = { 0x74, 0x52, 0xca, 0x55, 0xc2, 0x25, 0xa1, 0xca, 0x04, 0xb4, 0x8f, 0xae, 0x32, 0xcf, 0x56, 0xfc };
	flags |= NTLMSSP_REQUEST_NON_NT_SESSION_KEY;
	VerifyNTLMv1Authentication(flags, expectedAuthMSG, expectedLM, expectedNT, expectedSessBaseK, expectedEncrRandKeyNonNT, false);

	std::vector<unsigned char> expectedEncrRandKeywihLM = { 0x4c, 0xd7, 0xbb, 0x57, 0xd6, 0x97, 0xef, 0x9b, 0x54, 0x9f, 0x02, 0xb8, 0xf9, 0xb3, 0x78, 0x64 };
	flags |= NTLMSSP_NEGOTIATE_LM_KEY;
	VerifyNTLMv1Authentication(flags, expectedAuthMSG, expectedLM, expectedNT, expectedSessBaseK, expectedEncrRandKeywihLM, false);


	// session security part
	// expected values
	std::vector<unsigned char> expSealKey = { 0x04, 0xdd, 0x7f, 0x01, 0x4d, 0x85, 0x04, 0xd2, 0x65, 0xa2, 0x5c, 0xc8, 0x6a, 0x3a, 0x7c, 0x06 };
	std::vector<unsigned char> expSignKey = { };
	std::vector<unsigned char> expEncrText = { 0x56, 0xfe, 0x04, 0xd8, 0x61, 0xf9, 0x31, 0x9a, 0xf0, 0xd7, 0x23, 0x8a, 0x2e, 0x3b, 0x4d, 0x45, 0x7f, 0xb8 };
	std::array<unsigned char, 16u> expSignature = { 0x01, 0x00, 0x00, 0x00, 0x45, 0xc8, 0x44, 0xe5, 0x09, 0xdc, 0xd1, 0xdf, 0x2e, 0x45, 0x9d, 0x36 };

	flags &= ~NTLMSSP_REQUEST_NON_NT_SESSION_KEY;
	flags &= ~NTLMSSP_NEGOTIATE_LM_KEY;
	VerifySessionSecurity(flags, false, expectedSessBaseK, expectedLM, expEncrText, randSessionKey, expSignKey, expSignature, expectedSessBaseK);
}